# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class PVMInstanceCapture(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_storage_image_path': 'str',
        'cloud_storage_region': 'str',
        'cloud_storage_secret_key': 'str',
        'capture_destination': 'str',
        'capture_name': 'str',
        'capture_volume_ids': 'list[str]',
        'cloud_storage_access_key': 'str'
    }

    attribute_map = {
        'cloud_storage_image_path': 'cloudStorageImagePath',
        'cloud_storage_region': 'cloudStorageRegion',
        'cloud_storage_secret_key': 'cloudStorageSecretKey',
        'capture_destination': 'captureDestination',
        'capture_name': 'captureName',
        'capture_volume_ids': 'captureVolumeIDs',
        'cloud_storage_access_key': 'cloudStorageAccessKey'
    }

    def __init__(self, cloud_storage_image_path=None, cloud_storage_region=None, cloud_storage_secret_key=None, capture_destination='cloud-storage', capture_name=None, capture_volume_ids=None, cloud_storage_access_key=None, _configuration=None):  # noqa: E501
        """PVMInstanceCapture - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cloud_storage_image_path = None
        self._cloud_storage_region = None
        self._cloud_storage_secret_key = None
        self._capture_destination = None
        self._capture_name = None
        self._capture_volume_ids = None
        self._cloud_storage_access_key = None
        self.discriminator = None

        if cloud_storage_image_path is not None:
            self.cloud_storage_image_path = cloud_storage_image_path
        if cloud_storage_region is not None:
            self.cloud_storage_region = cloud_storage_region
        if cloud_storage_secret_key is not None:
            self.cloud_storage_secret_key = cloud_storage_secret_key
        self.capture_destination = capture_destination
        self.capture_name = capture_name
        if capture_volume_ids is not None:
            self.capture_volume_ids = capture_volume_ids
        if cloud_storage_access_key is not None:
            self.cloud_storage_access_key = cloud_storage_access_key

    @property
    def cloud_storage_image_path(self):
        """Gets the cloud_storage_image_path of this PVMInstanceCapture.  # noqa: E501

        Cloud Storage Image Path (bucket-name [/folder/../..])  # noqa: E501

        :return: The cloud_storage_image_path of this PVMInstanceCapture.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_image_path

    @cloud_storage_image_path.setter
    def cloud_storage_image_path(self, cloud_storage_image_path):
        """Sets the cloud_storage_image_path of this PVMInstanceCapture.

        Cloud Storage Image Path (bucket-name [/folder/../..])  # noqa: E501

        :param cloud_storage_image_path: The cloud_storage_image_path of this PVMInstanceCapture.  # noqa: E501
        :type: str
        """

        self._cloud_storage_image_path = cloud_storage_image_path

    @property
    def cloud_storage_region(self):
        """Gets the cloud_storage_region of this PVMInstanceCapture.  # noqa: E501

        Cloud Storage Region  # noqa: E501

        :return: The cloud_storage_region of this PVMInstanceCapture.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_region

    @cloud_storage_region.setter
    def cloud_storage_region(self, cloud_storage_region):
        """Sets the cloud_storage_region of this PVMInstanceCapture.

        Cloud Storage Region  # noqa: E501

        :param cloud_storage_region: The cloud_storage_region of this PVMInstanceCapture.  # noqa: E501
        :type: str
        """

        self._cloud_storage_region = cloud_storage_region

    @property
    def cloud_storage_secret_key(self):
        """Gets the cloud_storage_secret_key of this PVMInstanceCapture.  # noqa: E501

        Cloud Storage Secret key  # noqa: E501

        :return: The cloud_storage_secret_key of this PVMInstanceCapture.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_secret_key

    @cloud_storage_secret_key.setter
    def cloud_storage_secret_key(self, cloud_storage_secret_key):
        """Sets the cloud_storage_secret_key of this PVMInstanceCapture.

        Cloud Storage Secret key  # noqa: E501

        :param cloud_storage_secret_key: The cloud_storage_secret_key of this PVMInstanceCapture.  # noqa: E501
        :type: str
        """

        self._cloud_storage_secret_key = cloud_storage_secret_key

    @property
    def capture_destination(self):
        """Gets the capture_destination of this PVMInstanceCapture.  # noqa: E501

        Destination for the deployable image  # noqa: E501

        :return: The capture_destination of this PVMInstanceCapture.  # noqa: E501
        :rtype: str
        """
        return self._capture_destination

    @capture_destination.setter
    def capture_destination(self, capture_destination):
        """Sets the capture_destination of this PVMInstanceCapture.

        Destination for the deployable image  # noqa: E501

        :param capture_destination: The capture_destination of this PVMInstanceCapture.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and capture_destination is None:
            raise ValueError("Invalid value for `capture_destination`, must not be `None`")  # noqa: E501
        allowed_values = ["image-catalog", "cloud-storage", "both"]  # noqa: E501
        if (self._configuration.client_side_validation and
                capture_destination not in allowed_values):
            raise ValueError(
                "Invalid value for `capture_destination` ({0}), must be one of {1}"  # noqa: E501
                .format(capture_destination, allowed_values)
            )

        self._capture_destination = capture_destination

    @property
    def capture_name(self):
        """Gets the capture_name of this PVMInstanceCapture.  # noqa: E501

        Name of the deployable image created for the captured PVMInstance  # noqa: E501

        :return: The capture_name of this PVMInstanceCapture.  # noqa: E501
        :rtype: str
        """
        return self._capture_name

    @capture_name.setter
    def capture_name(self, capture_name):
        """Sets the capture_name of this PVMInstanceCapture.

        Name of the deployable image created for the captured PVMInstance  # noqa: E501

        :param capture_name: The capture_name of this PVMInstanceCapture.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and capture_name is None:
            raise ValueError("Invalid value for `capture_name`, must not be `None`")  # noqa: E501

        self._capture_name = capture_name

    @property
    def capture_volume_ids(self):
        """Gets the capture_volume_ids of this PVMInstanceCapture.  # noqa: E501

        List of Data volume IDs to include in the captured PVMInstance  # noqa: E501

        :return: The capture_volume_ids of this PVMInstanceCapture.  # noqa: E501
        :rtype: list[str]
        """
        return self._capture_volume_ids

    @capture_volume_ids.setter
    def capture_volume_ids(self, capture_volume_ids):
        """Sets the capture_volume_ids of this PVMInstanceCapture.

        List of Data volume IDs to include in the captured PVMInstance  # noqa: E501

        :param capture_volume_ids: The capture_volume_ids of this PVMInstanceCapture.  # noqa: E501
        :type: list[str]
        """

        self._capture_volume_ids = capture_volume_ids

    @property
    def cloud_storage_access_key(self):
        """Gets the cloud_storage_access_key of this PVMInstanceCapture.  # noqa: E501

        Cloud Storage Access key  # noqa: E501

        :return: The cloud_storage_access_key of this PVMInstanceCapture.  # noqa: E501
        :rtype: str
        """
        return self._cloud_storage_access_key

    @cloud_storage_access_key.setter
    def cloud_storage_access_key(self, cloud_storage_access_key):
        """Sets the cloud_storage_access_key of this PVMInstanceCapture.

        Cloud Storage Access key  # noqa: E501

        :param cloud_storage_access_key: The cloud_storage_access_key of this PVMInstanceCapture.  # noqa: E501
        :type: str
        """

        self._cloud_storage_access_key = cloud_storage_access_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PVMInstanceCapture, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PVMInstanceCapture):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PVMInstanceCapture):
            return True

        return self.to_dict() != other.to_dict()
