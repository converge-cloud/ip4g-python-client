# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class Tenant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssh_keys': 'list[SSHKey]',
        'tenant_id': 'str',
        'cloud_instances': 'list[CloudInstanceReference]',
        'creation_date': 'datetime',
        'enabled': 'bool',
        'icn': 'str',
        'peering_networks': 'list[PeeringNetwork]'
    }

    attribute_map = {
        'ssh_keys': 'sshKeys',
        'tenant_id': 'tenantID',
        'cloud_instances': 'cloudInstances',
        'creation_date': 'creationDate',
        'enabled': 'enabled',
        'icn': 'icn',
        'peering_networks': 'peeringNetworks'
    }

    def __init__(self, ssh_keys=None, tenant_id=None, cloud_instances=None, creation_date=None, enabled=None, icn=None, peering_networks=None, _configuration=None):  # noqa: E501
        """Tenant - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ssh_keys = None
        self._tenant_id = None
        self._cloud_instances = None
        self._creation_date = None
        self._enabled = None
        self._icn = None
        self._peering_networks = None
        self.discriminator = None

        if ssh_keys is not None:
            self.ssh_keys = ssh_keys
        self.tenant_id = tenant_id
        self.cloud_instances = cloud_instances
        self.creation_date = creation_date
        self.enabled = enabled
        if icn is not None:
            self.icn = icn
        if peering_networks is not None:
            self.peering_networks = peering_networks

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this Tenant.  # noqa: E501

        Tenant SSH Keys  # noqa: E501

        :return: The ssh_keys of this Tenant.  # noqa: E501
        :rtype: list[SSHKey]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this Tenant.

        Tenant SSH Keys  # noqa: E501

        :param ssh_keys: The ssh_keys of this Tenant.  # noqa: E501
        :type: list[SSHKey]
        """

        self._ssh_keys = ssh_keys

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Tenant.  # noqa: E501

        Tenant ID  # noqa: E501

        :return: The tenant_id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Tenant.

        Tenant ID  # noqa: E501

        :param tenant_id: The tenant_id of this Tenant.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def cloud_instances(self):
        """Gets the cloud_instances of this Tenant.  # noqa: E501

        Cloud Instances owned by the Tenant  # noqa: E501

        :return: The cloud_instances of this Tenant.  # noqa: E501
        :rtype: list[CloudInstanceReference]
        """
        return self._cloud_instances

    @cloud_instances.setter
    def cloud_instances(self, cloud_instances):
        """Sets the cloud_instances of this Tenant.

        Cloud Instances owned by the Tenant  # noqa: E501

        :param cloud_instances: The cloud_instances of this Tenant.  # noqa: E501
        :type: list[CloudInstanceReference]
        """
        if self._configuration.client_side_validation and cloud_instances is None:
            raise ValueError("Invalid value for `cloud_instances`, must not be `None`")  # noqa: E501

        self._cloud_instances = cloud_instances

    @property
    def creation_date(self):
        """Gets the creation_date of this Tenant.  # noqa: E501

        Date of Tenant creation  # noqa: E501

        :return: The creation_date of this Tenant.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Tenant.

        Date of Tenant creation  # noqa: E501

        :param creation_date: The creation_date of this Tenant.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def enabled(self):
        """Gets the enabled of this Tenant.  # noqa: E501

        Indicates if the tenant is enabled  # noqa: E501

        :return: The enabled of this Tenant.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Tenant.

        Indicates if the tenant is enabled  # noqa: E501

        :param enabled: The enabled of this Tenant.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def icn(self):
        """Gets the icn of this Tenant.  # noqa: E501

        IBM Customer Number  # noqa: E501

        :return: The icn of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._icn

    @icn.setter
    def icn(self, icn):
        """Sets the icn of this Tenant.

        IBM Customer Number  # noqa: E501

        :param icn: The icn of this Tenant.  # noqa: E501
        :type: str
        """

        self._icn = icn

    @property
    def peering_networks(self):
        """Gets the peering_networks of this Tenant.  # noqa: E501

        Peering Network Information (optional)  # noqa: E501

        :return: The peering_networks of this Tenant.  # noqa: E501
        :rtype: list[PeeringNetwork]
        """
        return self._peering_networks

    @peering_networks.setter
    def peering_networks(self, peering_networks):
        """Sets the peering_networks of this Tenant.

        Peering Network Information (optional)  # noqa: E501

        :param peering_networks: The peering_networks of this Tenant.  # noqa: E501
        :type: list[PeeringNetwork]
        """

        self._peering_networks = peering_networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tenant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tenant):
            return True

        return self.to_dict() != other.to_dict()
