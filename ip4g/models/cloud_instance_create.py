# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class CloudInstanceCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'processors': 'float',
        'region': 'str',
        'storage': 'float',
        'tenant_id': 'str',
        'instances': 'float',
        'memory': 'float',
        'proc_units': 'float'
    }

    attribute_map = {
        'processors': 'processors',
        'region': 'region',
        'storage': 'storage',
        'tenant_id': 'tenantID',
        'instances': 'instances',
        'memory': 'memory',
        'proc_units': 'procUnits'
    }

    def __init__(self, processors=None, region=None, storage=None, tenant_id=None, instances=None, memory=None, proc_units=None, _configuration=None):  # noqa: E501
        """CloudInstanceCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._processors = None
        self._region = None
        self._storage = None
        self._tenant_id = None
        self._instances = None
        self._memory = None
        self._proc_units = None
        self.discriminator = None

        self.processors = processors
        self.region = region
        if storage is not None:
            self.storage = storage
        self.tenant_id = tenant_id
        if instances is not None:
            self.instances = instances
        self.memory = memory
        self.proc_units = proc_units

    @property
    def processors(self):
        """Gets the processors of this CloudInstanceCreate.  # noqa: E501

        Number of processors allowed  # noqa: E501

        :return: The processors of this CloudInstanceCreate.  # noqa: E501
        :rtype: float
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """Sets the processors of this CloudInstanceCreate.

        Number of processors allowed  # noqa: E501

        :param processors: The processors of this CloudInstanceCreate.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and processors is None:
            raise ValueError("Invalid value for `processors`, must not be `None`")  # noqa: E501

        self._processors = processors

    @property
    def region(self):
        """Gets the region of this CloudInstanceCreate.  # noqa: E501

        The region the cloud instance lives  # noqa: E501

        :return: The region of this CloudInstanceCreate.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CloudInstanceCreate.

        The region the cloud instance lives  # noqa: E501

        :param region: The region of this CloudInstanceCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def storage(self):
        """Gets the storage of this CloudInstanceCreate.  # noqa: E501

        Amount of storage allowed (TB)  # noqa: E501

        :return: The storage of this CloudInstanceCreate.  # noqa: E501
        :rtype: float
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this CloudInstanceCreate.

        Amount of storage allowed (TB)  # noqa: E501

        :param storage: The storage of this CloudInstanceCreate.  # noqa: E501
        :type: float
        """

        self._storage = storage

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CloudInstanceCreate.  # noqa: E501

        The tenant ID that owns this cloud instance  # noqa: E501

        :return: The tenant_id of this CloudInstanceCreate.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CloudInstanceCreate.

        The tenant ID that owns this cloud instance  # noqa: E501

        :param tenant_id: The tenant_id of this CloudInstanceCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def instances(self):
        """Gets the instances of this CloudInstanceCreate.  # noqa: E501

        Number of power instances allowed  # noqa: E501

        :return: The instances of this CloudInstanceCreate.  # noqa: E501
        :rtype: float
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this CloudInstanceCreate.

        Number of power instances allowed  # noqa: E501

        :param instances: The instances of this CloudInstanceCreate.  # noqa: E501
        :type: float
        """

        self._instances = instances

    @property
    def memory(self):
        """Gets the memory of this CloudInstanceCreate.  # noqa: E501

        Amount of memory allowed  # noqa: E501

        :return: The memory of this CloudInstanceCreate.  # noqa: E501
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this CloudInstanceCreate.

        Amount of memory allowed  # noqa: E501

        :param memory: The memory of this CloudInstanceCreate.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")  # noqa: E501

        self._memory = memory

    @property
    def proc_units(self):
        """Gets the proc_units of this CloudInstanceCreate.  # noqa: E501

        Number of processor units allowed  # noqa: E501

        :return: The proc_units of this CloudInstanceCreate.  # noqa: E501
        :rtype: float
        """
        return self._proc_units

    @proc_units.setter
    def proc_units(self, proc_units):
        """Sets the proc_units of this CloudInstanceCreate.

        Number of processor units allowed  # noqa: E501

        :param proc_units: The proc_units of this CloudInstanceCreate.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and proc_units is None:
            raise ValueError("Invalid value for `proc_units`, must not be `None`")  # noqa: E501

        self._proc_units = proc_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudInstanceCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudInstanceCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudInstanceCreate):
            return True

        return self.to_dict() != other.to_dict()
