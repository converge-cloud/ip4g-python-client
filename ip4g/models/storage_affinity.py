# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class StorageAffinity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affinity_pvm_instance': 'str',
        'affinity_policy': 'str',
        'affinity_volume': 'str',
        'anti_affinity_pvm_instances': 'list[str]',
        'anti_affinity_volumes': 'list[str]'
    }

    attribute_map = {
        'affinity_pvm_instance': 'affinityPVMInstance',
        'affinity_policy': 'affinityPolicy',
        'affinity_volume': 'affinityVolume',
        'anti_affinity_pvm_instances': 'antiAffinityPVMInstances',
        'anti_affinity_volumes': 'antiAffinityVolumes'
    }

    def __init__(self, affinity_pvm_instance=None, affinity_policy=None, affinity_volume=None, anti_affinity_pvm_instances=None, anti_affinity_volumes=None, _configuration=None):  # noqa: E501
        """StorageAffinity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._affinity_pvm_instance = None
        self._affinity_policy = None
        self._affinity_volume = None
        self._anti_affinity_pvm_instances = None
        self._anti_affinity_volumes = None
        self.discriminator = None

        if affinity_pvm_instance is not None:
            self.affinity_pvm_instance = affinity_pvm_instance
        if affinity_policy is not None:
            self.affinity_policy = affinity_policy
        if affinity_volume is not None:
            self.affinity_volume = affinity_volume
        if anti_affinity_pvm_instances is not None:
            self.anti_affinity_pvm_instances = anti_affinity_pvm_instances
        if anti_affinity_volumes is not None:
            self.anti_affinity_volumes = anti_affinity_volumes

    @property
    def affinity_pvm_instance(self):
        """Gets the affinity_pvm_instance of this StorageAffinity.  # noqa: E501

        PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and affinityVolume is not provided  # noqa: E501

        :return: The affinity_pvm_instance of this StorageAffinity.  # noqa: E501
        :rtype: str
        """
        return self._affinity_pvm_instance

    @affinity_pvm_instance.setter
    def affinity_pvm_instance(self, affinity_pvm_instance):
        """Sets the affinity_pvm_instance of this StorageAffinity.

        PVM Instance (ID or Name) to base storage affinity policy against; required if requesting storage affinity and affinityVolume is not provided  # noqa: E501

        :param affinity_pvm_instance: The affinity_pvm_instance of this StorageAffinity.  # noqa: E501
        :type: str
        """

        self._affinity_pvm_instance = affinity_pvm_instance

    @property
    def affinity_policy(self):
        """Gets the affinity_policy of this StorageAffinity.  # noqa: E501

        Affinity policy for storage pool selection; ignored if storagePool provided; for policy 'affinity' requires one of affinityPVMInstance or affinityVolume to be specified; for policy 'anti-affinity' requires one of antiAffinityPVMInstances or antiAffinityVolumes to be specified  # noqa: E501

        :return: The affinity_policy of this StorageAffinity.  # noqa: E501
        :rtype: str
        """
        return self._affinity_policy

    @affinity_policy.setter
    def affinity_policy(self, affinity_policy):
        """Sets the affinity_policy of this StorageAffinity.

        Affinity policy for storage pool selection; ignored if storagePool provided; for policy 'affinity' requires one of affinityPVMInstance or affinityVolume to be specified; for policy 'anti-affinity' requires one of antiAffinityPVMInstances or antiAffinityVolumes to be specified  # noqa: E501

        :param affinity_policy: The affinity_policy of this StorageAffinity.  # noqa: E501
        :type: str
        """
        allowed_values = ["affinity", "anti-affinity"]  # noqa: E501
        if (self._configuration.client_side_validation and
                affinity_policy not in allowed_values):
            raise ValueError(
                "Invalid value for `affinity_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(affinity_policy, allowed_values)
            )

        self._affinity_policy = affinity_policy

    @property
    def affinity_volume(self):
        """Gets the affinity_volume of this StorageAffinity.  # noqa: E501

        Volume (ID or Name) to base storage affinity policy against; required if requesting storage affinity and affinityPVMInstance is not provided  # noqa: E501

        :return: The affinity_volume of this StorageAffinity.  # noqa: E501
        :rtype: str
        """
        return self._affinity_volume

    @affinity_volume.setter
    def affinity_volume(self, affinity_volume):
        """Sets the affinity_volume of this StorageAffinity.

        Volume (ID or Name) to base storage affinity policy against; required if requesting storage affinity and affinityPVMInstance is not provided  # noqa: E501

        :param affinity_volume: The affinity_volume of this StorageAffinity.  # noqa: E501
        :type: str
        """

        self._affinity_volume = affinity_volume

    @property
    def anti_affinity_pvm_instances(self):
        """Gets the anti_affinity_pvm_instances of this StorageAffinity.  # noqa: E501

        List of pvmInstances to base storage anti-affinity policy against; required if requesting storage anti-affinity and antiAffinityVolumes is not provided  # noqa: E501

        :return: The anti_affinity_pvm_instances of this StorageAffinity.  # noqa: E501
        :rtype: list[str]
        """
        return self._anti_affinity_pvm_instances

    @anti_affinity_pvm_instances.setter
    def anti_affinity_pvm_instances(self, anti_affinity_pvm_instances):
        """Sets the anti_affinity_pvm_instances of this StorageAffinity.

        List of pvmInstances to base storage anti-affinity policy against; required if requesting storage anti-affinity and antiAffinityVolumes is not provided  # noqa: E501

        :param anti_affinity_pvm_instances: The anti_affinity_pvm_instances of this StorageAffinity.  # noqa: E501
        :type: list[str]
        """

        self._anti_affinity_pvm_instances = anti_affinity_pvm_instances

    @property
    def anti_affinity_volumes(self):
        """Gets the anti_affinity_volumes of this StorageAffinity.  # noqa: E501

        List of volumes to base storage anti-affinity policy against; required if requesting storage anti-affinity and antiAffinityPVMInstances is not provided  # noqa: E501

        :return: The anti_affinity_volumes of this StorageAffinity.  # noqa: E501
        :rtype: list[str]
        """
        return self._anti_affinity_volumes

    @anti_affinity_volumes.setter
    def anti_affinity_volumes(self, anti_affinity_volumes):
        """Sets the anti_affinity_volumes of this StorageAffinity.

        List of volumes to base storage anti-affinity policy against; required if requesting storage anti-affinity and antiAffinityPVMInstances is not provided  # noqa: E501

        :param anti_affinity_volumes: The anti_affinity_volumes of this StorageAffinity.  # noqa: E501
        :type: list[str]
        """

        self._anti_affinity_volumes = anti_affinity_volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageAffinity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageAffinity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageAffinity):
            return True

        return self.to_dict() != other.to_dict()
