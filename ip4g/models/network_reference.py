# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class NetworkReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'jumbo': 'bool',
        'name': 'str',
        'network_id': 'str',
        'type': 'str',
        'vlan_id': 'float'
    }

    attribute_map = {
        'href': 'href',
        'jumbo': 'jumbo',
        'name': 'name',
        'network_id': 'networkID',
        'type': 'type',
        'vlan_id': 'vlanID'
    }

    def __init__(self, href=None, jumbo=None, name=None, network_id=None, type='vlan', vlan_id=None, _configuration=None):  # noqa: E501
        """NetworkReference - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._href = None
        self._jumbo = None
        self._name = None
        self._network_id = None
        self._type = None
        self._vlan_id = None
        self.discriminator = None

        self.href = href
        self.jumbo = jumbo
        self.name = name
        self.network_id = network_id
        self.type = type
        self.vlan_id = vlan_id

    @property
    def href(self):
        """Gets the href of this NetworkReference.  # noqa: E501

        Link to Network resource  # noqa: E501

        :return: The href of this NetworkReference.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this NetworkReference.

        Link to Network resource  # noqa: E501

        :param href: The href of this NetworkReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def jumbo(self):
        """Gets the jumbo of this NetworkReference.  # noqa: E501

        MTU Jumbo Network enabled  # noqa: E501

        :return: The jumbo of this NetworkReference.  # noqa: E501
        :rtype: bool
        """
        return self._jumbo

    @jumbo.setter
    def jumbo(self, jumbo):
        """Sets the jumbo of this NetworkReference.

        MTU Jumbo Network enabled  # noqa: E501

        :param jumbo: The jumbo of this NetworkReference.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and jumbo is None:
            raise ValueError("Invalid value for `jumbo`, must not be `None`")  # noqa: E501

        self._jumbo = jumbo

    @property
    def name(self):
        """Gets the name of this NetworkReference.  # noqa: E501

        Network Name  # noqa: E501

        :return: The name of this NetworkReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkReference.

        Network Name  # noqa: E501

        :param name: The name of this NetworkReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def network_id(self):
        """Gets the network_id of this NetworkReference.  # noqa: E501

        Unique Network ID  # noqa: E501

        :return: The network_id of this NetworkReference.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this NetworkReference.

        Unique Network ID  # noqa: E501

        :param network_id: The network_id of this NetworkReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")  # noqa: E501

        self._network_id = network_id

    @property
    def type(self):
        """Gets the type of this NetworkReference.  # noqa: E501

        Type of Network {vlan, pub-vlan}  # noqa: E501

        :return: The type of this NetworkReference.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkReference.

        Type of Network {vlan, pub-vlan}  # noqa: E501

        :param type: The type of this NetworkReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["vlan", "pub-vlan"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vlan_id(self):
        """Gets the vlan_id of this NetworkReference.  # noqa: E501

        VLAN ID  # noqa: E501

        :return: The vlan_id of this NetworkReference.  # noqa: E501
        :rtype: float
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this NetworkReference.

        VLAN ID  # noqa: E501

        :param vlan_id: The vlan_id of this NetworkReference.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and vlan_id is None:
            raise ValueError("Invalid value for `vlan_id`, must not be `None`")  # noqa: E501

        self._vlan_id = vlan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkReference):
            return True

        return self.to_dict() != other.to_dict()
