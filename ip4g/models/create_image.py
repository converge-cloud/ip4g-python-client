# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class CreateImage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_name': 'str',
        'region': 'str',
        'secret_key': 'str',
        'access_key': 'str',
        'image_id': 'str',
        'image_filename': 'str',
        'image_path': 'str',
        'os_type': 'str',
        'source': 'str',
        'storage_affinity': 'StorageAffinity',
        'storage_pool': 'str',
        'bucket_name': 'str',
        'disk_type': 'str'
    }

    attribute_map = {
        'image_name': 'imageName',
        'region': 'region',
        'secret_key': 'secretKey',
        'access_key': 'accessKey',
        'image_id': 'imageID',
        'image_filename': 'imageFilename',
        'image_path': 'imagePath',
        'os_type': 'osType',
        'source': 'source',
        'storage_affinity': 'storageAffinity',
        'storage_pool': 'storagePool',
        'bucket_name': 'bucketName',
        'disk_type': 'diskType'
    }

    def __init__(self, image_name=None, region=None, secret_key=None, access_key=None, image_id=None, image_filename=None, image_path=None, os_type=None, source=None, storage_affinity=None, storage_pool=None, bucket_name=None, disk_type=None, _configuration=None):  # noqa: E501
        """CreateImage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._image_name = None
        self._region = None
        self._secret_key = None
        self._access_key = None
        self._image_id = None
        self._image_filename = None
        self._image_path = None
        self._os_type = None
        self._source = None
        self._storage_affinity = None
        self._storage_pool = None
        self._bucket_name = None
        self._disk_type = None
        self.discriminator = None

        if image_name is not None:
            self.image_name = image_name
        if region is not None:
            self.region = region
        if secret_key is not None:
            self.secret_key = secret_key
        if access_key is not None:
            self.access_key = access_key
        if image_id is not None:
            self.image_id = image_id
        if image_filename is not None:
            self.image_filename = image_filename
        if image_path is not None:
            self.image_path = image_path
        if os_type is not None:
            self.os_type = os_type
        self.source = source
        if storage_affinity is not None:
            self.storage_affinity = storage_affinity
        if storage_pool is not None:
            self.storage_pool = storage_pool
        if bucket_name is not None:
            self.bucket_name = bucket_name
        if disk_type is not None:
            self.disk_type = disk_type

    @property
    def image_name(self):
        """Gets the image_name of this CreateImage.  # noqa: E501

        Name to give created image; required for import image  # noqa: E501

        :return: The image_name of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this CreateImage.

        Name to give created image; required for import image  # noqa: E501

        :param image_name: The image_name of this CreateImage.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def region(self):
        """Gets the region of this CreateImage.  # noqa: E501

        Cloud Storage Region; only required to access IBM Cloud Storage  # noqa: E501

        :return: The region of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CreateImage.

        Cloud Storage Region; only required to access IBM Cloud Storage  # noqa: E501

        :param region: The region of this CreateImage.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def secret_key(self):
        """Gets the secret_key of this CreateImage.  # noqa: E501

        Cloud Storage secret key; required for import image  # noqa: E501

        :return: The secret_key of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this CreateImage.

        Cloud Storage secret key; required for import image  # noqa: E501

        :param secret_key: The secret_key of this CreateImage.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def access_key(self):
        """Gets the access_key of this CreateImage.  # noqa: E501

        Cloud Storage access key; required for import image  # noqa: E501

        :return: The access_key of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this CreateImage.

        Cloud Storage access key; required for import image  # noqa: E501

        :param access_key: The access_key of this CreateImage.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def image_id(self):
        """Gets the image_id of this CreateImage.  # noqa: E501

        Image ID of existing source image; required for copy image  # noqa: E501

        :return: The image_id of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this CreateImage.

        Image ID of existing source image; required for copy image  # noqa: E501

        :param image_id: The image_id of this CreateImage.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def image_filename(self):
        """Gets the image_filename of this CreateImage.  # noqa: E501

        Cloud Storage image filename; required for import image  # noqa: E501

        :return: The image_filename of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._image_filename

    @image_filename.setter
    def image_filename(self, image_filename):
        """Sets the image_filename of this CreateImage.

        Cloud Storage image filename; required for import image  # noqa: E501

        :param image_filename: The image_filename of this CreateImage.  # noqa: E501
        :type: str
        """

        self._image_filename = image_filename

    @property
    def image_path(self):
        """Gets the image_path of this CreateImage.  # noqa: E501

        (deprecated - replaced by region, imageFilename and bucketName) Path to image starting with service endpoint and ending with image filename  # noqa: E501

        :return: The image_path of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """Sets the image_path of this CreateImage.

        (deprecated - replaced by region, imageFilename and bucketName) Path to image starting with service endpoint and ending with image filename  # noqa: E501

        :param image_path: The image_path of this CreateImage.  # noqa: E501
        :type: str
        """

        self._image_path = image_path

    @property
    def os_type(self):
        """Gets the os_type of this CreateImage.  # noqa: E501

        Image OS Type, required if importing a raw image; raw images can only be imported using the command line interface  # noqa: E501

        :return: The os_type of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this CreateImage.

        Image OS Type, required if importing a raw image; raw images can only be imported using the command line interface  # noqa: E501

        :param os_type: The os_type of this CreateImage.  # noqa: E501
        :type: str
        """
        allowed_values = ["aix", "ibmi", "rhel", "sles"]  # noqa: E501
        if (self._configuration.client_side_validation and
                os_type not in allowed_values):
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"  # noqa: E501
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def source(self):
        """Gets the source of this CreateImage.  # noqa: E501

        Source of the image  # noqa: E501

        :return: The source of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateImage.

        Source of the image  # noqa: E501

        :param source: The source of this CreateImage.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        allowed_values = ["root-project", "url"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def storage_affinity(self):
        """Gets the storage_affinity of this CreateImage.  # noqa: E501

        The storage affinity data; ignored if storagePool is provided; Used only when importing an image from cloud storage.  # noqa: E501

        :return: The storage_affinity of this CreateImage.  # noqa: E501
        :rtype: StorageAffinity
        """
        return self._storage_affinity

    @storage_affinity.setter
    def storage_affinity(self, storage_affinity):
        """Sets the storage_affinity of this CreateImage.

        The storage affinity data; ignored if storagePool is provided; Used only when importing an image from cloud storage.  # noqa: E501

        :param storage_affinity: The storage_affinity of this CreateImage.  # noqa: E501
        :type: StorageAffinity
        """

        self._storage_affinity = storage_affinity

    @property
    def storage_pool(self):
        """Gets the storage_pool of this CreateImage.  # noqa: E501

        Storage pool where the image will be loaded; if provided then storageAffinity and diskType will be ignored; Used only when importing an image from cloud storage.  # noqa: E501

        :return: The storage_pool of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._storage_pool

    @storage_pool.setter
    def storage_pool(self, storage_pool):
        """Sets the storage_pool of this CreateImage.

        Storage pool where the image will be loaded; if provided then storageAffinity and diskType will be ignored; Used only when importing an image from cloud storage.  # noqa: E501

        :param storage_pool: The storage_pool of this CreateImage.  # noqa: E501
        :type: str
        """

        self._storage_pool = storage_pool

    @property
    def bucket_name(self):
        """Gets the bucket_name of this CreateImage.  # noqa: E501

        Cloud Storage bucket name; bucket-name[/optional/folder]; required for import image  # noqa: E501

        :return: The bucket_name of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this CreateImage.

        Cloud Storage bucket name; bucket-name[/optional/folder]; required for import image  # noqa: E501

        :param bucket_name: The bucket_name of this CreateImage.  # noqa: E501
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def disk_type(self):
        """Gets the disk_type of this CreateImage.  # noqa: E501

        Type of Disk; will be ignored if storagePool or affinityPolicy is provided; Used only when importing an image from cloud storage.  # noqa: E501

        :return: The disk_type of this CreateImage.  # noqa: E501
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this CreateImage.

        Type of Disk; will be ignored if storagePool or affinityPolicy is provided; Used only when importing an image from cloud storage.  # noqa: E501

        :param disk_type: The disk_type of this CreateImage.  # noqa: E501
        :type: str
        """

        self._disk_type = disk_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateImage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateImage):
            return True

        return self.to_dict() != other.to_dict()
