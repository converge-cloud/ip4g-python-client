# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class PVMInstanceUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'processors': 'float',
        'sap_profile_id': 'str',
        'server_name': 'str',
        'storage_pool_affinity': 'bool',
        'license_repository_capacity': 'int',
        'memory': 'float',
        'migratable': 'bool',
        'proc_type': 'str',
        'pin_policy': 'PinPolicy',
        'software_licenses': 'SoftwareLicenses',
        'virtual_cores': 'VirtualCores'
    }

    attribute_map = {
        'processors': 'processors',
        'sap_profile_id': 'sapProfileID',
        'server_name': 'serverName',
        'storage_pool_affinity': 'storagePoolAffinity',
        'license_repository_capacity': 'licenseRepositoryCapacity',
        'memory': 'memory',
        'migratable': 'migratable',
        'proc_type': 'procType',
        'pin_policy': 'pinPolicy',
        'software_licenses': 'softwareLicenses',
        'virtual_cores': 'virtualCores'
    }

    def __init__(self, processors=None, sap_profile_id=None, server_name=None, storage_pool_affinity=True, license_repository_capacity=None, memory=None, migratable=True, proc_type=None, pin_policy=None, software_licenses=None, virtual_cores=None, _configuration=None):  # noqa: E501
        """PVMInstanceUpdate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._processors = None
        self._sap_profile_id = None
        self._server_name = None
        self._storage_pool_affinity = None
        self._license_repository_capacity = None
        self._memory = None
        self._migratable = None
        self._proc_type = None
        self._pin_policy = None
        self._software_licenses = None
        self._virtual_cores = None
        self.discriminator = None

        if processors is not None:
            self.processors = processors
        if sap_profile_id is not None:
            self.sap_profile_id = sap_profile_id
        if server_name is not None:
            self.server_name = server_name
        if storage_pool_affinity is not None:
            self.storage_pool_affinity = storage_pool_affinity
        if license_repository_capacity is not None:
            self.license_repository_capacity = license_repository_capacity
        if memory is not None:
            self.memory = memory
        if migratable is not None:
            self.migratable = migratable
        if proc_type is not None:
            self.proc_type = proc_type
        if pin_policy is not None:
            self.pin_policy = pin_policy
        if software_licenses is not None:
            self.software_licenses = software_licenses
        if virtual_cores is not None:
            self.virtual_cores = virtual_cores

    @property
    def processors(self):
        """Gets the processors of this PVMInstanceUpdate.  # noqa: E501

        Number of processors allocated  # noqa: E501

        :return: The processors of this PVMInstanceUpdate.  # noqa: E501
        :rtype: float
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """Sets the processors of this PVMInstanceUpdate.

        Number of processors allocated  # noqa: E501

        :param processors: The processors of this PVMInstanceUpdate.  # noqa: E501
        :type: float
        """

        self._processors = processors

    @property
    def sap_profile_id(self):
        """Gets the sap_profile_id of this PVMInstanceUpdate.  # noqa: E501

        If an SAP pvm-instance, the SAP profile ID to switch to (only while shutdown)  # noqa: E501

        :return: The sap_profile_id of this PVMInstanceUpdate.  # noqa: E501
        :rtype: str
        """
        return self._sap_profile_id

    @sap_profile_id.setter
    def sap_profile_id(self, sap_profile_id):
        """Sets the sap_profile_id of this PVMInstanceUpdate.

        If an SAP pvm-instance, the SAP profile ID to switch to (only while shutdown)  # noqa: E501

        :param sap_profile_id: The sap_profile_id of this PVMInstanceUpdate.  # noqa: E501
        :type: str
        """

        self._sap_profile_id = sap_profile_id

    @property
    def server_name(self):
        """Gets the server_name of this PVMInstanceUpdate.  # noqa: E501

        Name of the server to create  # noqa: E501

        :return: The server_name of this PVMInstanceUpdate.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this PVMInstanceUpdate.

        Name of the server to create  # noqa: E501

        :param server_name: The server_name of this PVMInstanceUpdate.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def storage_pool_affinity(self):
        """Gets the storage_pool_affinity of this PVMInstanceUpdate.  # noqa: E501

        Indicates if all volumes attached to the server must reside in the same storage pool; If set to false then volumes from any storage type and pool can be attached to the PVMInstance; Impacts PVMInstance snapshot, capture, and clone, for capture and clone - only data volumes that are of the same storage type and in the same storage pool of the PVMInstance's boot volume can be included; for snapshot - all data volumes to be included in the snapshot must reside in the same storage type and pool. Once set to false, cannot be set back to true unless all volumes attached reside in the same storage type and pool.  # noqa: E501

        :return: The storage_pool_affinity of this PVMInstanceUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._storage_pool_affinity

    @storage_pool_affinity.setter
    def storage_pool_affinity(self, storage_pool_affinity):
        """Sets the storage_pool_affinity of this PVMInstanceUpdate.

        Indicates if all volumes attached to the server must reside in the same storage pool; If set to false then volumes from any storage type and pool can be attached to the PVMInstance; Impacts PVMInstance snapshot, capture, and clone, for capture and clone - only data volumes that are of the same storage type and in the same storage pool of the PVMInstance's boot volume can be included; for snapshot - all data volumes to be included in the snapshot must reside in the same storage type and pool. Once set to false, cannot be set back to true unless all volumes attached reside in the same storage type and pool.  # noqa: E501

        :param storage_pool_affinity: The storage_pool_affinity of this PVMInstanceUpdate.  # noqa: E501
        :type: bool
        """

        self._storage_pool_affinity = storage_pool_affinity

    @property
    def license_repository_capacity(self):
        """Gets the license_repository_capacity of this PVMInstanceUpdate.  # noqa: E501

        The VTL license repository capacity TB value  # noqa: E501

        :return: The license_repository_capacity of this PVMInstanceUpdate.  # noqa: E501
        :rtype: int
        """
        return self._license_repository_capacity

    @license_repository_capacity.setter
    def license_repository_capacity(self, license_repository_capacity):
        """Sets the license_repository_capacity of this PVMInstanceUpdate.

        The VTL license repository capacity TB value  # noqa: E501

        :param license_repository_capacity: The license_repository_capacity of this PVMInstanceUpdate.  # noqa: E501
        :type: int
        """

        self._license_repository_capacity = license_repository_capacity

    @property
    def memory(self):
        """Gets the memory of this PVMInstanceUpdate.  # noqa: E501

        Amount of memory allocated (in GB)  # noqa: E501

        :return: The memory of this PVMInstanceUpdate.  # noqa: E501
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this PVMInstanceUpdate.

        Amount of memory allocated (in GB)  # noqa: E501

        :param memory: The memory of this PVMInstanceUpdate.  # noqa: E501
        :type: float
        """

        self._memory = memory

    @property
    def migratable(self):
        """Gets the migratable of this PVMInstanceUpdate.  # noqa: E501

        Indicates if the server is allowed to migrate between hosts  # noqa: E501

        :return: The migratable of this PVMInstanceUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._migratable

    @migratable.setter
    def migratable(self, migratable):
        """Sets the migratable of this PVMInstanceUpdate.

        Indicates if the server is allowed to migrate between hosts  # noqa: E501

        :param migratable: The migratable of this PVMInstanceUpdate.  # noqa: E501
        :type: bool
        """

        self._migratable = migratable

    @property
    def proc_type(self):
        """Gets the proc_type of this PVMInstanceUpdate.  # noqa: E501

        Processor type (dedicated, shared, capped)  # noqa: E501

        :return: The proc_type of this PVMInstanceUpdate.  # noqa: E501
        :rtype: str
        """
        return self._proc_type

    @proc_type.setter
    def proc_type(self, proc_type):
        """Sets the proc_type of this PVMInstanceUpdate.

        Processor type (dedicated, shared, capped)  # noqa: E501

        :param proc_type: The proc_type of this PVMInstanceUpdate.  # noqa: E501
        :type: str
        """
        allowed_values = ["dedicated", "shared", "capped"]  # noqa: E501
        if (self._configuration.client_side_validation and
                proc_type not in allowed_values):
            raise ValueError(
                "Invalid value for `proc_type` ({0}), must be one of {1}"  # noqa: E501
                .format(proc_type, allowed_values)
            )

        self._proc_type = proc_type

    @property
    def pin_policy(self):
        """Gets the pin_policy of this PVMInstanceUpdate.  # noqa: E501


        :return: The pin_policy of this PVMInstanceUpdate.  # noqa: E501
        :rtype: PinPolicy
        """
        return self._pin_policy

    @pin_policy.setter
    def pin_policy(self, pin_policy):
        """Sets the pin_policy of this PVMInstanceUpdate.


        :param pin_policy: The pin_policy of this PVMInstanceUpdate.  # noqa: E501
        :type: PinPolicy
        """

        self._pin_policy = pin_policy

    @property
    def software_licenses(self):
        """Gets the software_licenses of this PVMInstanceUpdate.  # noqa: E501

        The pvm instance Software Licenses  # noqa: E501

        :return: The software_licenses of this PVMInstanceUpdate.  # noqa: E501
        :rtype: SoftwareLicenses
        """
        return self._software_licenses

    @software_licenses.setter
    def software_licenses(self, software_licenses):
        """Sets the software_licenses of this PVMInstanceUpdate.

        The pvm instance Software Licenses  # noqa: E501

        :param software_licenses: The software_licenses of this PVMInstanceUpdate.  # noqa: E501
        :type: SoftwareLicenses
        """

        self._software_licenses = software_licenses

    @property
    def virtual_cores(self):
        """Gets the virtual_cores of this PVMInstanceUpdate.  # noqa: E501

        The pvm instance virtual CPU information  # noqa: E501

        :return: The virtual_cores of this PVMInstanceUpdate.  # noqa: E501
        :rtype: VirtualCores
        """
        return self._virtual_cores

    @virtual_cores.setter
    def virtual_cores(self, virtual_cores):
        """Sets the virtual_cores of this PVMInstanceUpdate.

        The pvm instance virtual CPU information  # noqa: E501

        :param virtual_cores: The virtual_cores of this PVMInstanceUpdate.  # noqa: E501
        :type: VirtualCores
        """

        self._virtual_cores = virtual_cores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PVMInstanceUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PVMInstanceUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PVMInstanceUpdate):
            return True

        return self.to_dict() != other.to_dict()
