# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class StorageTypesCapacity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maximum_storage_allocation': 'MaximumStorageAllocation',
        'storage_types_capacity': 'list[StorageTypeCapacity]'
    }

    attribute_map = {
        'maximum_storage_allocation': 'maximumStorageAllocation',
        'storage_types_capacity': 'storageTypesCapacity'
    }

    def __init__(self, maximum_storage_allocation=None, storage_types_capacity=None, _configuration=None):  # noqa: E501
        """StorageTypesCapacity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._maximum_storage_allocation = None
        self._storage_types_capacity = None
        self.discriminator = None

        if maximum_storage_allocation is not None:
            self.maximum_storage_allocation = maximum_storage_allocation
        if storage_types_capacity is not None:
            self.storage_types_capacity = storage_types_capacity

    @property
    def maximum_storage_allocation(self):
        """Gets the maximum_storage_allocation of this StorageTypesCapacity.  # noqa: E501

        maximum storage allocation  # noqa: E501

        :return: The maximum_storage_allocation of this StorageTypesCapacity.  # noqa: E501
        :rtype: MaximumStorageAllocation
        """
        return self._maximum_storage_allocation

    @maximum_storage_allocation.setter
    def maximum_storage_allocation(self, maximum_storage_allocation):
        """Sets the maximum_storage_allocation of this StorageTypesCapacity.

        maximum storage allocation  # noqa: E501

        :param maximum_storage_allocation: The maximum_storage_allocation of this StorageTypesCapacity.  # noqa: E501
        :type: MaximumStorageAllocation
        """

        self._maximum_storage_allocation = maximum_storage_allocation

    @property
    def storage_types_capacity(self):
        """Gets the storage_types_capacity of this StorageTypesCapacity.  # noqa: E501


        :return: The storage_types_capacity of this StorageTypesCapacity.  # noqa: E501
        :rtype: list[StorageTypeCapacity]
        """
        return self._storage_types_capacity

    @storage_types_capacity.setter
    def storage_types_capacity(self, storage_types_capacity):
        """Sets the storage_types_capacity of this StorageTypesCapacity.


        :param storage_types_capacity: The storage_types_capacity of this StorageTypesCapacity.  # noqa: E501
        :type: list[StorageTypeCapacity]
        """

        self._storage_types_capacity = storage_types_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageTypesCapacity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageTypesCapacity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageTypesCapacity):
            return True

        return self.to_dict() != other.to_dict()
