# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class NetworkPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'external_ip': 'str',
        'href': 'str',
        'ip_address': 'str',
        'mac_address': 'str',
        'port_id': 'str',
        'pvm_instance': 'NetworkPortPvmInstance',
        'status': 'str'
    }

    attribute_map = {
        'description': 'description',
        'external_ip': 'externalIP',
        'href': 'href',
        'ip_address': 'ipAddress',
        'mac_address': 'macAddress',
        'port_id': 'portID',
        'pvm_instance': 'pvmInstance',
        'status': 'status'
    }

    def __init__(self, description=None, external_ip=None, href=None, ip_address=None, mac_address=None, port_id=None, pvm_instance=None, status=None, _configuration=None):  # noqa: E501
        """NetworkPort - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._external_ip = None
        self._href = None
        self._ip_address = None
        self._mac_address = None
        self._port_id = None
        self._pvm_instance = None
        self._status = None
        self.discriminator = None

        self.description = description
        if external_ip is not None:
            self.external_ip = external_ip
        if href is not None:
            self.href = href
        self.ip_address = ip_address
        self.mac_address = mac_address
        self.port_id = port_id
        if pvm_instance is not None:
            self.pvm_instance = pvm_instance
        self.status = status

    @property
    def description(self):
        """Gets the description of this NetworkPort.  # noqa: E501

        Description of the port (not unique or indexable)  # noqa: E501

        :return: The description of this NetworkPort.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetworkPort.

        Description of the port (not unique or indexable)  # noqa: E501

        :param description: The description of this NetworkPort.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def external_ip(self):
        """Gets the external_ip of this NetworkPort.  # noqa: E501

        The external ip address (for pub-vlan networks)  # noqa: E501

        :return: The external_ip of this NetworkPort.  # noqa: E501
        :rtype: str
        """
        return self._external_ip

    @external_ip.setter
    def external_ip(self, external_ip):
        """Sets the external_ip of this NetworkPort.

        The external ip address (for pub-vlan networks)  # noqa: E501

        :param external_ip: The external_ip of this NetworkPort.  # noqa: E501
        :type: str
        """

        self._external_ip = external_ip

    @property
    def href(self):
        """Gets the href of this NetworkPort.  # noqa: E501

        Link to port resource  # noqa: E501

        :return: The href of this NetworkPort.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this NetworkPort.

        Link to port resource  # noqa: E501

        :param href: The href of this NetworkPort.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkPort.  # noqa: E501

        The ip address of this port  # noqa: E501

        :return: The ip_address of this NetworkPort.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkPort.

        The ip address of this port  # noqa: E501

        :param ip_address: The ip_address of this NetworkPort.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkPort.  # noqa: E501

        The mac address of the network interface  # noqa: E501

        :return: The mac_address of this NetworkPort.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkPort.

        The mac address of the network interface  # noqa: E501

        :param mac_address: The mac_address of this NetworkPort.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")  # noqa: E501

        self._mac_address = mac_address

    @property
    def port_id(self):
        """Gets the port_id of this NetworkPort.  # noqa: E501

        The unique Port ID  # noqa: E501

        :return: The port_id of this NetworkPort.  # noqa: E501
        :rtype: str
        """
        return self._port_id

    @port_id.setter
    def port_id(self, port_id):
        """Sets the port_id of this NetworkPort.

        The unique Port ID  # noqa: E501

        :param port_id: The port_id of this NetworkPort.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and port_id is None:
            raise ValueError("Invalid value for `port_id`, must not be `None`")  # noqa: E501

        self._port_id = port_id

    @property
    def pvm_instance(self):
        """Gets the pvm_instance of this NetworkPort.  # noqa: E501


        :return: The pvm_instance of this NetworkPort.  # noqa: E501
        :rtype: NetworkPortPvmInstance
        """
        return self._pvm_instance

    @pvm_instance.setter
    def pvm_instance(self, pvm_instance):
        """Sets the pvm_instance of this NetworkPort.


        :param pvm_instance: The pvm_instance of this NetworkPort.  # noqa: E501
        :type: NetworkPortPvmInstance
        """

        self._pvm_instance = pvm_instance

    @property
    def status(self):
        """Gets the status of this NetworkPort.  # noqa: E501

        Te  # noqa: E501

        :return: The status of this NetworkPort.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NetworkPort.

        Te  # noqa: E501

        :param status: The status of this NetworkPort.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkPort):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkPort):
            return True

        return self.to_dict() != other.to_dict()
