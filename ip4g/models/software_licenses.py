# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class SoftwareLicenses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ibmi_rds': 'bool',
        'ibmi_rds_users': 'int',
        'ibmi_css': 'bool',
        'ibmi_dbq': 'bool',
        'ibmi_pha': 'bool'
    }

    attribute_map = {
        'ibmi_rds': 'ibmiRDS',
        'ibmi_rds_users': 'ibmiRDSUsers',
        'ibmi_css': 'ibmiCSS',
        'ibmi_dbq': 'ibmiDBQ',
        'ibmi_pha': 'ibmiPHA'
    }

    def __init__(self, ibmi_rds=False, ibmi_rds_users=None, ibmi_css=False, ibmi_dbq=False, ibmi_pha=False, _configuration=None):  # noqa: E501
        """SoftwareLicenses - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ibmi_rds = None
        self._ibmi_rds_users = None
        self._ibmi_css = None
        self._ibmi_dbq = None
        self._ibmi_pha = None
        self.discriminator = None

        if ibmi_rds is not None:
            self.ibmi_rds = ibmi_rds
        if ibmi_rds_users is not None:
            self.ibmi_rds_users = ibmi_rds_users
        if ibmi_css is not None:
            self.ibmi_css = ibmi_css
        if ibmi_dbq is not None:
            self.ibmi_dbq = ibmi_dbq
        if ibmi_pha is not None:
            self.ibmi_pha = ibmi_pha

    @property
    def ibmi_rds(self):
        """Gets the ibmi_rds of this SoftwareLicenses.  # noqa: E501

        IBMi Rational Dev Studio  # noqa: E501

        :return: The ibmi_rds of this SoftwareLicenses.  # noqa: E501
        :rtype: bool
        """
        return self._ibmi_rds

    @ibmi_rds.setter
    def ibmi_rds(self, ibmi_rds):
        """Sets the ibmi_rds of this SoftwareLicenses.

        IBMi Rational Dev Studio  # noqa: E501

        :param ibmi_rds: The ibmi_rds of this SoftwareLicenses.  # noqa: E501
        :type: bool
        """

        self._ibmi_rds = ibmi_rds

    @property
    def ibmi_rds_users(self):
        """Gets the ibmi_rds_users of this SoftwareLicenses.  # noqa: E501

        IBMi Rational Dev Studio Number of User Licenses  # noqa: E501

        :return: The ibmi_rds_users of this SoftwareLicenses.  # noqa: E501
        :rtype: int
        """
        return self._ibmi_rds_users

    @ibmi_rds_users.setter
    def ibmi_rds_users(self, ibmi_rds_users):
        """Sets the ibmi_rds_users of this SoftwareLicenses.

        IBMi Rational Dev Studio Number of User Licenses  # noqa: E501

        :param ibmi_rds_users: The ibmi_rds_users of this SoftwareLicenses.  # noqa: E501
        :type: int
        """

        self._ibmi_rds_users = ibmi_rds_users

    @property
    def ibmi_css(self):
        """Gets the ibmi_css of this SoftwareLicenses.  # noqa: E501

        IBMi Cloud Storage Solution  # noqa: E501

        :return: The ibmi_css of this SoftwareLicenses.  # noqa: E501
        :rtype: bool
        """
        return self._ibmi_css

    @ibmi_css.setter
    def ibmi_css(self, ibmi_css):
        """Sets the ibmi_css of this SoftwareLicenses.

        IBMi Cloud Storage Solution  # noqa: E501

        :param ibmi_css: The ibmi_css of this SoftwareLicenses.  # noqa: E501
        :type: bool
        """

        self._ibmi_css = ibmi_css

    @property
    def ibmi_dbq(self):
        """Gets the ibmi_dbq of this SoftwareLicenses.  # noqa: E501

        IBMi Cloud Storage Solution  # noqa: E501

        :return: The ibmi_dbq of this SoftwareLicenses.  # noqa: E501
        :rtype: bool
        """
        return self._ibmi_dbq

    @ibmi_dbq.setter
    def ibmi_dbq(self, ibmi_dbq):
        """Sets the ibmi_dbq of this SoftwareLicenses.

        IBMi Cloud Storage Solution  # noqa: E501

        :param ibmi_dbq: The ibmi_dbq of this SoftwareLicenses.  # noqa: E501
        :type: bool
        """

        self._ibmi_dbq = ibmi_dbq

    @property
    def ibmi_pha(self):
        """Gets the ibmi_pha of this SoftwareLicenses.  # noqa: E501

        IBMi Power High Availability  # noqa: E501

        :return: The ibmi_pha of this SoftwareLicenses.  # noqa: E501
        :rtype: bool
        """
        return self._ibmi_pha

    @ibmi_pha.setter
    def ibmi_pha(self, ibmi_pha):
        """Sets the ibmi_pha of this SoftwareLicenses.

        IBMi Power High Availability  # noqa: E501

        :param ibmi_pha: The ibmi_pha of this SoftwareLicenses.  # noqa: E501
        :type: bool
        """

        self._ibmi_pha = ibmi_pha

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoftwareLicenses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwareLicenses):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SoftwareLicenses):
            return True

        return self.to_dict() != other.to_dict()
