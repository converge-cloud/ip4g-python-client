# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class Token(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'expires': 'datetime',
        'refresh_token': 'str',
        'type': 'str'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'expires': 'expires',
        'refresh_token': 'refreshToken',
        'type': 'type'
    }

    def __init__(self, access_token=None, expires=None, refresh_token=None, type=None, _configuration=None):  # noqa: E501
        """Token - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_token = None
        self._expires = None
        self._refresh_token = None
        self._type = None
        self.discriminator = None

        self.access_token = access_token
        self.expires = expires
        self.refresh_token = refresh_token
        self.type = type

    @property
    def access_token(self):
        """Gets the access_token of this Token.  # noqa: E501

        AccessToken  # noqa: E501

        :return: The access_token of this Token.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this Token.

        AccessToken  # noqa: E501

        :param access_token: The access_token of this Token.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def expires(self):
        """Gets the expires of this Token.  # noqa: E501

        Token Expires  # noqa: E501

        :return: The expires of this Token.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Token.

        Token Expires  # noqa: E501

        :param expires: The expires of this Token.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and expires is None:
            raise ValueError("Invalid value for `expires`, must not be `None`")  # noqa: E501

        self._expires = expires

    @property
    def refresh_token(self):
        """Gets the refresh_token of this Token.  # noqa: E501

        Refresh Token  # noqa: E501

        :return: The refresh_token of this Token.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this Token.

        Refresh Token  # noqa: E501

        :param refresh_token: The refresh_token of this Token.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")  # noqa: E501

        self._refresh_token = refresh_token

    @property
    def type(self):
        """Gets the type of this Token.  # noqa: E501

        Token Type  # noqa: E501

        :return: The type of this Token.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Token.

        Token Type  # noqa: E501

        :param type: The type of this Token.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Token, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Token):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Token):
            return True

        return self.to_dict() != other.to_dict()
