# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class TokenExtra(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_time': 'datetime',
        'token': 'Token',
        'valid': 'bool',
        'expires_in': 'float'
    }

    attribute_map = {
        'server_time': 'serverTime',
        'token': 'token',
        'valid': 'valid',
        'expires_in': 'expiresIn'
    }

    def __init__(self, server_time=None, token=None, valid=None, expires_in=None, _configuration=None):  # noqa: E501
        """TokenExtra - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._server_time = None
        self._token = None
        self._valid = None
        self._expires_in = None
        self.discriminator = None

        self.server_time = server_time
        self.token = token
        self.valid = valid
        self.expires_in = expires_in

    @property
    def server_time(self):
        """Gets the server_time of this TokenExtra.  # noqa: E501

        Time on the service broker  # noqa: E501

        :return: The server_time of this TokenExtra.  # noqa: E501
        :rtype: datetime
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this TokenExtra.

        Time on the service broker  # noqa: E501

        :param server_time: The server_time of this TokenExtra.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and server_time is None:
            raise ValueError("Invalid value for `server_time`, must not be `None`")  # noqa: E501

        self._server_time = server_time

    @property
    def token(self):
        """Gets the token of this TokenExtra.  # noqa: E501

        OAuth Token  # noqa: E501

        :return: The token of this TokenExtra.  # noqa: E501
        :rtype: Token
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TokenExtra.

        OAuth Token  # noqa: E501

        :param token: The token of this TokenExtra.  # noqa: E501
        :type: Token
        """
        if self._configuration.client_side_validation and token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def valid(self):
        """Gets the valid of this TokenExtra.  # noqa: E501

        Is this token valid  # noqa: E501

        :return: The valid of this TokenExtra.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this TokenExtra.

        Is this token valid  # noqa: E501

        :param valid: The valid of this TokenExtra.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")  # noqa: E501

        self._valid = valid

    @property
    def expires_in(self):
        """Gets the expires_in of this TokenExtra.  # noqa: E501

        Number of seconds token will expire  # noqa: E501

        :return: The expires_in of this TokenExtra.  # noqa: E501
        :rtype: float
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this TokenExtra.

        Number of seconds token will expire  # noqa: E501

        :param expires_in: The expires_in of this TokenExtra.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")  # noqa: E501

        self._expires_in = expires_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenExtra, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenExtra):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TokenExtra):
            return True

        return self.to_dict() != other.to_dict()
