# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class HostPVMInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'tenant_id': 'str',
        'cloud_instance_id': 'str',
        'owner': 'OwnerInfo',
        'pvm_instance_id': 'str',
        'pvm_name': 'str'
    }

    attribute_map = {
        'state': 'state',
        'tenant_id': 'tenantID',
        'cloud_instance_id': 'cloudInstanceID',
        'owner': 'owner',
        'pvm_instance_id': 'pvmInstanceID',
        'pvm_name': 'pvmName'
    }

    def __init__(self, state=None, tenant_id=None, cloud_instance_id=None, owner=None, pvm_instance_id=None, pvm_name=None, _configuration=None):  # noqa: E501
        """HostPVMInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._state = None
        self._tenant_id = None
        self._cloud_instance_id = None
        self._owner = None
        self._pvm_instance_id = None
        self._pvm_name = None
        self.discriminator = None

        self.state = state
        self.tenant_id = tenant_id
        self.cloud_instance_id = cloud_instance_id
        self.owner = owner
        self.pvm_instance_id = pvm_instance_id
        self.pvm_name = pvm_name

    @property
    def state(self):
        """Gets the state of this HostPVMInstance.  # noqa: E501

        State of pvm instance  # noqa: E501

        :return: The state of this HostPVMInstance.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HostPVMInstance.

        State of pvm instance  # noqa: E501

        :param state: The state of this HostPVMInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def tenant_id(self):
        """Gets the tenant_id of this HostPVMInstance.  # noqa: E501

        Tenant ID of pvm instance  # noqa: E501

        :return: The tenant_id of this HostPVMInstance.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this HostPVMInstance.

        Tenant ID of pvm instance  # noqa: E501

        :param tenant_id: The tenant_id of this HostPVMInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def cloud_instance_id(self):
        """Gets the cloud_instance_id of this HostPVMInstance.  # noqa: E501

        Cloud Instance ID pvm instance is a member of  # noqa: E501

        :return: The cloud_instance_id of this HostPVMInstance.  # noqa: E501
        :rtype: str
        """
        return self._cloud_instance_id

    @cloud_instance_id.setter
    def cloud_instance_id(self, cloud_instance_id):
        """Sets the cloud_instance_id of this HostPVMInstance.

        Cloud Instance ID pvm instance is a member of  # noqa: E501

        :param cloud_instance_id: The cloud_instance_id of this HostPVMInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cloud_instance_id is None:
            raise ValueError("Invalid value for `cloud_instance_id`, must not be `None`")  # noqa: E501

        self._cloud_instance_id = cloud_instance_id

    @property
    def owner(self):
        """Gets the owner of this HostPVMInstance.  # noqa: E501

        Owner information of pvm instance  # noqa: E501

        :return: The owner of this HostPVMInstance.  # noqa: E501
        :rtype: OwnerInfo
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this HostPVMInstance.

        Owner information of pvm instance  # noqa: E501

        :param owner: The owner of this HostPVMInstance.  # noqa: E501
        :type: OwnerInfo
        """
        if self._configuration.client_side_validation and owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def pvm_instance_id(self):
        """Gets the pvm_instance_id of this HostPVMInstance.  # noqa: E501

        Instance ID  # noqa: E501

        :return: The pvm_instance_id of this HostPVMInstance.  # noqa: E501
        :rtype: str
        """
        return self._pvm_instance_id

    @pvm_instance_id.setter
    def pvm_instance_id(self, pvm_instance_id):
        """Sets the pvm_instance_id of this HostPVMInstance.

        Instance ID  # noqa: E501

        :param pvm_instance_id: The pvm_instance_id of this HostPVMInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and pvm_instance_id is None:
            raise ValueError("Invalid value for `pvm_instance_id`, must not be `None`")  # noqa: E501

        self._pvm_instance_id = pvm_instance_id

    @property
    def pvm_name(self):
        """Gets the pvm_name of this HostPVMInstance.  # noqa: E501

        Instance name  # noqa: E501

        :return: The pvm_name of this HostPVMInstance.  # noqa: E501
        :rtype: str
        """
        return self._pvm_name

    @pvm_name.setter
    def pvm_name(self, pvm_name):
        """Sets the pvm_name of this HostPVMInstance.

        Instance name  # noqa: E501

        :param pvm_name: The pvm_name of this HostPVMInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and pvm_name is None:
            raise ValueError("Invalid value for `pvm_name`, must not be `None`")  # noqa: E501

        self._pvm_name = pvm_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostPVMInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostPVMInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostPVMInstance):
            return True

        return self.to_dict() != other.to_dict()
