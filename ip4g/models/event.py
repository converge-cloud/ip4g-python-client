# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'str',
        'level': 'str',
        'resource': 'str',
        'time': 'datetime',
        'user': 'EventUser',
        'action': 'str',
        'message': 'str',
        'metadata': 'object',
        'timestamp': 'int'
    }

    attribute_map = {
        'event_id': 'eventID',
        'level': 'level',
        'resource': 'resource',
        'time': 'time',
        'user': 'user',
        'action': 'action',
        'message': 'message',
        'metadata': 'metadata',
        'timestamp': 'timestamp'
    }

    def __init__(self, event_id=None, level=None, resource=None, time=None, user=None, action=None, message=None, metadata=None, timestamp=None, _configuration=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._event_id = None
        self._level = None
        self._resource = None
        self._time = None
        self._user = None
        self._action = None
        self._message = None
        self._metadata = None
        self._timestamp = None
        self.discriminator = None

        self.event_id = event_id
        self.level = level
        self.resource = resource
        self.time = time
        if user is not None:
            self.user = user
        self.action = action
        self.message = message
        if metadata is not None:
            self.metadata = metadata
        self.timestamp = timestamp

    @property
    def event_id(self):
        """Gets the event_id of this Event.  # noqa: E501

        ID of the Activity  # noqa: E501

        :return: The event_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Event.

        ID of the Activity  # noqa: E501

        :param event_id: The event_id of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def level(self):
        """Gets the level of this Event.  # noqa: E501

        Level of the event (notice, info, warning, error)  # noqa: E501

        :return: The level of this Event.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Event.

        Level of the event (notice, info, warning, error)  # noqa: E501

        :param level: The level of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501
        allowed_values = ["notice", "info", "warning", "error"]  # noqa: E501
        if (self._configuration.client_side_validation and
                level not in allowed_values):
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def resource(self):
        """Gets the resource of this Event.  # noqa: E501

        Type of resource for this event  # noqa: E501

        :return: The resource of this Event.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Event.

        Type of resource for this event  # noqa: E501

        :param resource: The resource of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def time(self):
        """Gets the time of this Event.  # noqa: E501

        Time of activity in ISO 8601 - RFC3339  # noqa: E501

        :return: The time of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Event.

        Time of activity in ISO 8601 - RFC3339  # noqa: E501

        :param time: The time of this Event.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def user(self):
        """Gets the user of this Event.  # noqa: E501


        :return: The user of this Event.  # noqa: E501
        :rtype: EventUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Event.


        :param user: The user of this Event.  # noqa: E501
        :type: EventUser
        """

        self._user = user

    @property
    def action(self):
        """Gets the action of this Event.  # noqa: E501

        Type of action for this event  # noqa: E501

        :return: The action of this Event.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Event.

        Type of action for this event  # noqa: E501

        :param action: The action of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def message(self):
        """Gets the message of this Event.  # noqa: E501

        The (translated) message of the event  # noqa: E501

        :return: The message of this Event.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Event.

        The (translated) message of the event  # noqa: E501

        :param message: The message of this Event.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def metadata(self):
        """Gets the metadata of this Event.  # noqa: E501

        Any metadata associated with the event  # noqa: E501

        :return: The metadata of this Event.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Event.

        Any metadata associated with the event  # noqa: E501

        :param metadata: The metadata of this Event.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def timestamp(self):
        """Gets the timestamp of this Event.  # noqa: E501

        Time of activity in unix epoch  # noqa: E501

        :return: The timestamp of this Event.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Event.

        Time of activity in unix epoch  # noqa: E501

        :param timestamp: The timestamp of this Event.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
