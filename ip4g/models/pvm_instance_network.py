# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class PVMInstanceNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'external_ip': 'str',
        'href': 'str',
        'mac_address': 'str',
        'network_id': 'str',
        'network_name': 'str',
        'version': 'float',
        'ip': 'str',
        'ip_address': 'str'
    }

    attribute_map = {
        'type': 'type',
        'external_ip': 'externalIP',
        'href': 'href',
        'mac_address': 'macAddress',
        'network_id': 'networkID',
        'network_name': 'networkName',
        'version': 'version',
        'ip': 'ip',
        'ip_address': 'ipAddress'
    }

    def __init__(self, type=None, external_ip=None, href=None, mac_address=None, network_id=None, network_name=None, version=None, ip=None, ip_address=None, _configuration=None):  # noqa: E501
        """PVMInstanceNetwork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._external_ip = None
        self._href = None
        self._mac_address = None
        self._network_id = None
        self._network_name = None
        self._version = None
        self._ip = None
        self._ip_address = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if external_ip is not None:
            self.external_ip = external_ip
        if href is not None:
            self.href = href
        if mac_address is not None:
            self.mac_address = mac_address
        if network_id is not None:
            self.network_id = network_id
        if network_name is not None:
            self.network_name = network_name
        if version is not None:
            self.version = version
        if ip is not None:
            self.ip = ip
        if ip_address is not None:
            self.ip_address = ip_address

    @property
    def type(self):
        """Gets the type of this PVMInstanceNetwork.  # noqa: E501

        The address type (fixed or dynamic)  # noqa: E501

        :return: The type of this PVMInstanceNetwork.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PVMInstanceNetwork.

        The address type (fixed or dynamic)  # noqa: E501

        :param type: The type of this PVMInstanceNetwork.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def external_ip(self):
        """Gets the external_ip of this PVMInstanceNetwork.  # noqa: E501

        The external ip address (for pub-vlan networks)  # noqa: E501

        :return: The external_ip of this PVMInstanceNetwork.  # noqa: E501
        :rtype: str
        """
        return self._external_ip

    @external_ip.setter
    def external_ip(self, external_ip):
        """Sets the external_ip of this PVMInstanceNetwork.

        The external ip address (for pub-vlan networks)  # noqa: E501

        :param external_ip: The external_ip of this PVMInstanceNetwork.  # noqa: E501
        :type: str
        """

        self._external_ip = external_ip

    @property
    def href(self):
        """Gets the href of this PVMInstanceNetwork.  # noqa: E501

        Link to PVM Instance Network  # noqa: E501

        :return: The href of this PVMInstanceNetwork.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PVMInstanceNetwork.

        Link to PVM Instance Network  # noqa: E501

        :param href: The href of this PVMInstanceNetwork.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def mac_address(self):
        """Gets the mac_address of this PVMInstanceNetwork.  # noqa: E501

        The mac address of the network interface  # noqa: E501

        :return: The mac_address of this PVMInstanceNetwork.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this PVMInstanceNetwork.

        The mac address of the network interface  # noqa: E501

        :param mac_address: The mac_address of this PVMInstanceNetwork.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def network_id(self):
        """Gets the network_id of this PVMInstanceNetwork.  # noqa: E501

        ID of the network  # noqa: E501

        :return: The network_id of this PVMInstanceNetwork.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this PVMInstanceNetwork.

        ID of the network  # noqa: E501

        :param network_id: The network_id of this PVMInstanceNetwork.  # noqa: E501
        :type: str
        """

        self._network_id = network_id

    @property
    def network_name(self):
        """Gets the network_name of this PVMInstanceNetwork.  # noqa: E501

        The name of the network the address is on  # noqa: E501

        :return: The network_name of this PVMInstanceNetwork.  # noqa: E501
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this PVMInstanceNetwork.

        The name of the network the address is on  # noqa: E501

        :param network_name: The network_name of this PVMInstanceNetwork.  # noqa: E501
        :type: str
        """

        self._network_name = network_name

    @property
    def version(self):
        """Gets the version of this PVMInstanceNetwork.  # noqa: E501

        The version of the information provided  # noqa: E501

        :return: The version of this PVMInstanceNetwork.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PVMInstanceNetwork.

        The version of the information provided  # noqa: E501

        :param version: The version of this PVMInstanceNetwork.  # noqa: E501
        :type: float
        """

        self._version = version

    @property
    def ip(self):
        """Gets the ip of this PVMInstanceNetwork.  # noqa: E501

        (deprecated - replaced by ipAddress)  # noqa: E501

        :return: The ip of this PVMInstanceNetwork.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this PVMInstanceNetwork.

        (deprecated - replaced by ipAddress)  # noqa: E501

        :param ip: The ip of this PVMInstanceNetwork.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def ip_address(self):
        """Gets the ip_address of this PVMInstanceNetwork.  # noqa: E501

        The ip address of this network interface  # noqa: E501

        :return: The ip_address of this PVMInstanceNetwork.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PVMInstanceNetwork.

        The ip address of this network interface  # noqa: E501

        :param ip_address: The ip_address of this PVMInstanceNetwork.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PVMInstanceNetwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PVMInstanceNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PVMInstanceNetwork):
            return True

        return self.to_dict() != other.to_dict()
