# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class UserInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email': 'str',
        'id': 'str',
        'image_url': 'str',
        'member_of': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'id': 'id',
        'image_url': 'imageURL',
        'member_of': 'memberOf'
    }

    def __init__(self, name=None, email=None, id=None, image_url=None, member_of=None, _configuration=None):  # noqa: E501
        """UserInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._email = None
        self._id = None
        self._image_url = None
        self._member_of = None
        self.discriminator = None

        self.name = name
        self.email = email
        self.id = id
        if image_url is not None:
            self.image_url = image_url
        if member_of is not None:
            self.member_of = member_of

    @property
    def name(self):
        """Gets the name of this UserInfo.  # noqa: E501

        User Name  # noqa: E501

        :return: The name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserInfo.

        User Name  # noqa: E501

        :param name: The name of this UserInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this UserInfo.  # noqa: E501

        User Email  # noqa: E501

        :return: The email of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.

        User Email  # noqa: E501

        :param email: The email of this UserInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserInfo.  # noqa: E501

        User ID  # noqa: E501

        :return: The id of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserInfo.

        User ID  # noqa: E501

        :param id: The id of this UserInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this UserInfo.  # noqa: E501

        User Image URL  # noqa: E501

        :return: The image_url of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this UserInfo.

        User Image URL  # noqa: E501

        :param image_url: The image_url of this UserInfo.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def member_of(self):
        """Gets the member_of of this UserInfo.  # noqa: E501

        Member of the following tenants  # noqa: E501

        :return: The member_of of this UserInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of):
        """Sets the member_of of this UserInfo.

        Member of the following tenants  # noqa: E501

        :param member_of: The member_of of this UserInfo.  # noqa: E501
        :type: list[str]
        """

        self._member_of = member_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserInfo):
            return True

        return self.to_dict() != other.to_dict()
