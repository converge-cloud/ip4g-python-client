# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class DeviceCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_code': 'str',
        'expires_in': 'float',
        'interval': 'float',
        'user_code': 'str',
        'verification_url': 'str'
    }

    attribute_map = {
        'device_code': 'deviceCode',
        'expires_in': 'expiresIn',
        'interval': 'interval',
        'user_code': 'userCode',
        'verification_url': 'verificationURL'
    }

    def __init__(self, device_code=None, expires_in=None, interval=None, user_code=None, verification_url=None, _configuration=None):  # noqa: E501
        """DeviceCode - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_code = None
        self._expires_in = None
        self._interval = None
        self._user_code = None
        self._verification_url = None
        self.discriminator = None

        self.device_code = device_code
        self.expires_in = expires_in
        self.interval = interval
        self.user_code = user_code
        self.verification_url = verification_url

    @property
    def device_code(self):
        """Gets the device_code of this DeviceCode.  # noqa: E501

        This code lets the device running the app securely determine whether the user has granted or denied access  # noqa: E501

        :return: The device_code of this DeviceCode.  # noqa: E501
        :rtype: str
        """
        return self._device_code

    @device_code.setter
    def device_code(self, device_code):
        """Sets the device_code of this DeviceCode.

        This code lets the device running the app securely determine whether the user has granted or denied access  # noqa: E501

        :param device_code: The device_code of this DeviceCode.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and device_code is None:
            raise ValueError("Invalid value for `device_code`, must not be `None`")  # noqa: E501

        self._device_code = device_code

    @property
    def expires_in(self):
        """Gets the expires_in of this DeviceCode.  # noqa: E501

        The length of time, in seconds, that the device_code and user_code are valid  # noqa: E501

        :return: The expires_in of this DeviceCode.  # noqa: E501
        :rtype: float
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this DeviceCode.

        The length of time, in seconds, that the device_code and user_code are valid  # noqa: E501

        :param expires_in: The expires_in of this DeviceCode.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")  # noqa: E501

        self._expires_in = expires_in

    @property
    def interval(self):
        """Gets the interval of this DeviceCode.  # noqa: E501

        The length of time, in seconds, that your device should wait between polling requests  # noqa: E501

        :return: The interval of this DeviceCode.  # noqa: E501
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this DeviceCode.

        The length of time, in seconds, that your device should wait between polling requests  # noqa: E501

        :param interval: The interval of this DeviceCode.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def user_code(self):
        """Gets the user_code of this DeviceCode.  # noqa: E501

        The value given to the user to enter on device authentication page  # noqa: E501

        :return: The user_code of this DeviceCode.  # noqa: E501
        :rtype: str
        """
        return self._user_code

    @user_code.setter
    def user_code(self, user_code):
        """Sets the user_code of this DeviceCode.

        The value given to the user to enter on device authentication page  # noqa: E501

        :param user_code: The user_code of this DeviceCode.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_code is None:
            raise ValueError("Invalid value for `user_code`, must not be `None`")  # noqa: E501

        self._user_code = user_code

    @property
    def verification_url(self):
        """Gets the verification_url of this DeviceCode.  # noqa: E501

        A URL that the user must navigate to, on a separate device, to enter the user_code and grant or deny access to your application. Your user interface will also display this value  # noqa: E501

        :return: The verification_url of this DeviceCode.  # noqa: E501
        :rtype: str
        """
        return self._verification_url

    @verification_url.setter
    def verification_url(self, verification_url):
        """Sets the verification_url of this DeviceCode.

        A URL that the user must navigate to, on a separate device, to enter the user_code and grant or deny access to your application. Your user interface will also display this value  # noqa: E501

        :param verification_url: The verification_url of this DeviceCode.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and verification_url is None:
            raise ValueError("Invalid value for `verification_url`, must not be `None`")  # noqa: E501

        self._verification_url = verification_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceCode):
            return True

        return self.to_dict() != other.to_dict()
