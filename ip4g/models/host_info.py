# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ip4g.configuration import Configuration


class HostInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'memory': 'HostResource',
        'pvm_instances': 'list[HostPVMInstance]',
        'cores': 'HostResource',
        'hostname': 'str',
        'ip_address': 'str'
    }

    attribute_map = {
        'memory': 'memory',
        'pvm_instances': 'pvmInstances',
        'cores': 'cores',
        'hostname': 'hostname',
        'ip_address': 'ipAddress'
    }

    def __init__(self, memory=None, pvm_instances=None, cores=None, hostname=None, ip_address=None, _configuration=None):  # noqa: E501
        """HostInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._memory = None
        self._pvm_instances = None
        self._cores = None
        self._hostname = None
        self._ip_address = None
        self.discriminator = None

        self.memory = memory
        self.pvm_instances = pvm_instances
        self.cores = cores
        self.hostname = hostname
        self.ip_address = ip_address

    @property
    def memory(self):
        """Gets the memory of this HostInfo.  # noqa: E501

        Host memory information  # noqa: E501

        :return: The memory of this HostInfo.  # noqa: E501
        :rtype: HostResource
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this HostInfo.

        Host memory information  # noqa: E501

        :param memory: The memory of this HostInfo.  # noqa: E501
        :type: HostResource
        """
        if self._configuration.client_side_validation and memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")  # noqa: E501

        self._memory = memory

    @property
    def pvm_instances(self):
        """Gets the pvm_instances of this HostInfo.  # noqa: E501

        PVM Instances on host  # noqa: E501

        :return: The pvm_instances of this HostInfo.  # noqa: E501
        :rtype: list[HostPVMInstance]
        """
        return self._pvm_instances

    @pvm_instances.setter
    def pvm_instances(self, pvm_instances):
        """Sets the pvm_instances of this HostInfo.

        PVM Instances on host  # noqa: E501

        :param pvm_instances: The pvm_instances of this HostInfo.  # noqa: E501
        :type: list[HostPVMInstance]
        """
        if self._configuration.client_side_validation and pvm_instances is None:
            raise ValueError("Invalid value for `pvm_instances`, must not be `None`")  # noqa: E501

        self._pvm_instances = pvm_instances

    @property
    def cores(self):
        """Gets the cores of this HostInfo.  # noqa: E501

        Host core information  # noqa: E501

        :return: The cores of this HostInfo.  # noqa: E501
        :rtype: HostResource
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this HostInfo.

        Host core information  # noqa: E501

        :param cores: The cores of this HostInfo.  # noqa: E501
        :type: HostResource
        """
        if self._configuration.client_side_validation and cores is None:
            raise ValueError("Invalid value for `cores`, must not be `None`")  # noqa: E501

        self._cores = cores

    @property
    def hostname(self):
        """Gets the hostname of this HostInfo.  # noqa: E501

        Hostname  # noqa: E501

        :return: The hostname of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostInfo.

        Hostname  # noqa: E501

        :param hostname: The hostname of this HostInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def ip_address(self):
        """Gets the ip_address of this HostInfo.  # noqa: E501

        IP Address  # noqa: E501

        :return: The ip_address of this HostInfo.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this HostInfo.

        IP Address  # noqa: E501

        :param ip_address: The ip_address of this HostInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HostInfo):
            return True

        return self.to_dict() != other.to_dict()
