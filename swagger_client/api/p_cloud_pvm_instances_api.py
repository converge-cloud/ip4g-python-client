# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PCloudPVMInstancesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def pcloud_pvminstances_action_post(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Perform an action (start stop reboot immediate-shutdown reset) on a PVMInstance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_action_post(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceAction body: Parameters for the desired action (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_action_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_action_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_action_post_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Perform an action (start stop reboot immediate-shutdown reset) on a PVMInstance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_action_post_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceAction body: Parameters for the desired action (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_action_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_action_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_action_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_action_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/action', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_capture_post(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Capture a PVMInstance and create a deployable image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_capture_post(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceCapture body: Parameters for the capture PVMInstance (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_capture_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_capture_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_capture_post_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Capture a PVMInstance and create a deployable image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_capture_post_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceCapture body: Parameters for the capture PVMInstance (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_capture_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_capture_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_capture_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_capture_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/capture', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_clone_post(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Clone a PVMInstance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_clone_post(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceClone body: Clone PVM Instance parameters (required)
        :return: PVMInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_clone_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_clone_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_clone_post_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Clone a PVMInstance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_clone_post_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceClone body: Clone PVM Instance parameters (required)
        :return: PVMInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_clone_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_clone_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_clone_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_clone_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_console_get(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """List all console languages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_console_get(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: ConsoleLanguages
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_console_get_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_console_get_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_console_get_with_http_info(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """List all console languages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_console_get_with_http_info(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: ConsoleLanguages
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_console_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_console_get`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_console_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/console', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsoleLanguages',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_console_post(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Generate the noVNC Console URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_console_post(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: PVMInstanceConsole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_console_post_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_console_post_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_console_post_with_http_info(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Generate the noVNC Console URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_console_post_with_http_info(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: PVMInstanceConsole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_console_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_console_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_console_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/console', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstanceConsole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_console_put(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Update PVMInstance console laguage code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_console_put(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param ConsoleLanguage body: Parameters to update a PVMInstance console required codepage (required)
        :return: ConsoleLanguage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_console_put_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_console_put_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_console_put_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Update PVMInstance console laguage code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_console_put_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param ConsoleLanguage body: Parameters to update a PVMInstance console required codepage (required)
        :return: ConsoleLanguage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_console_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_console_put`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_console_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_console_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/console', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConsoleLanguage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_delete(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Delete a PCloud PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_delete(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param bool delete_data_volumes: Indicates if all data volumes attached to the PVMInstance should be deleted when deleting the PVMInstance. Shared data volumes will be deleted if there are no other PVMInstances attached.
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_delete_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_delete_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_delete_with_http_info(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Delete a PCloud PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_delete_with_http_info(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param bool delete_data_volumes: Indicates if all data volumes attached to the PVMInstance should be deleted when deleting the PVMInstance. Shared data volumes will be deleted if there are no other PVMInstances attached.
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'delete_data_volumes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_delete`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []
        if 'delete_data_volumes' in params:
            query_params.append(('delete_data_volumes', params['delete_data_volumes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_get(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Get a PVM Instance's current state/information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_get(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: PVMInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_get_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_get_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_get_with_http_info(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Get a PVM Instance's current state/information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_get_with_http_info(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: PVMInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_get`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_getall(self, cloud_instance_id, **kwargs):  # noqa: E501
        """Get all the pvm instances for this cloud instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_getall(cloud_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :return: PVMInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_getall_with_http_info(cloud_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_getall_with_http_info(cloud_instance_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_getall_with_http_info(self, cloud_instance_id, **kwargs):  # noqa: E501
        """Get all the pvm instances for this cloud instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_getall_with_http_info(cloud_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :return: PVMInstances
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_getall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_getall`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstances',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_networks_delete(self, cloud_instance_id, pvm_instance_id, network_id, **kwargs):  # noqa: E501
        """Remove all Address of Network from a PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_networks_delete(cloud_instance_id, pvm_instance_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param str network_id: Network ID (required)
        :param PVMInstanceRemoveNetwork body: Remove a network from PVM Instance parameters
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_networks_delete_with_http_info(cloud_instance_id, pvm_instance_id, network_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_networks_delete_with_http_info(cloud_instance_id, pvm_instance_id, network_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_networks_delete_with_http_info(self, cloud_instance_id, pvm_instance_id, network_id, **kwargs):  # noqa: E501
        """Remove all Address of Network from a PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_networks_delete_with_http_info(cloud_instance_id, pvm_instance_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param str network_id: Network ID (required)
        :param PVMInstanceRemoveNetwork body: Remove a network from PVM Instance parameters
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'network_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_networks_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_networks_delete`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_networks_delete`")  # noqa: E501
        # verify the required parameter 'network_id' is set
        if self.api_client.client_side_validation and ('network_id' not in params or
                                                       params['network_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `network_id` when calling `pcloud_pvminstances_networks_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501
        if 'network_id' in params:
            path_params['network_id'] = params['network_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/networks/{network_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_networks_get(self, cloud_instance_id, pvm_instance_id, network_id, **kwargs):  # noqa: E501
        """Get a PVM Instance's network information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_networks_get(cloud_instance_id, pvm_instance_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param str network_id: Network ID (required)
        :return: PVMInstanceNetworks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_networks_get_with_http_info(cloud_instance_id, pvm_instance_id, network_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_networks_get_with_http_info(cloud_instance_id, pvm_instance_id, network_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_networks_get_with_http_info(self, cloud_instance_id, pvm_instance_id, network_id, **kwargs):  # noqa: E501
        """Get a PVM Instance's network information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_networks_get_with_http_info(cloud_instance_id, pvm_instance_id, network_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param str network_id: Network ID (required)
        :return: PVMInstanceNetworks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'network_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_networks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_networks_get`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_networks_get`")  # noqa: E501
        # verify the required parameter 'network_id' is set
        if self.api_client.client_side_validation and ('network_id' not in params or
                                                       params['network_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `network_id` when calling `pcloud_pvminstances_networks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501
        if 'network_id' in params:
            path_params['network_id'] = params['network_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/networks/{network_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstanceNetworks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_networks_getall(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Get all networks for this PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_networks_getall(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: PVMInstanceNetworks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_networks_getall_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_networks_getall_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_networks_getall_with_http_info(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Get all networks for this PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_networks_getall_with_http_info(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: PVMInstanceNetworks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_networks_getall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_networks_getall`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_networks_getall`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/networks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstanceNetworks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_networks_post(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Perform network addition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_networks_post(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceAddNetwork body: Add network to PVM Instance parameters (required)
        :return: PVMInstanceNetwork
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_networks_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_networks_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_networks_post_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Perform network addition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_networks_post_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceAddNetwork body: Add network to PVM Instance parameters (required)
        :return: PVMInstanceNetwork
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_networks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_networks_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_networks_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_networks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/networks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstanceNetwork',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_operations_post(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Perform an operation on a PVMInstance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_operations_post(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceOperation body: Parameters for the desired operations (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_operations_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_operations_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_operations_post_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Perform an operation on a PVMInstance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_operations_post_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceOperation body: Parameters for the desired operations (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_operations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_operations_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_operations_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_operations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/operations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_post(self, cloud_instance_id, body, **kwargs):  # noqa: E501
        """Create a new Power VM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_post(cloud_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param PVMInstanceCreate body: Parameters for the creation of a new Power VM Instance (required)
        :param bool skip_host_validation: Option to skip host validation on PVMInstance Create API
        :return: PVMInstanceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_post_with_http_info(cloud_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_post_with_http_info(cloud_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_post_with_http_info(self, cloud_instance_id, body, **kwargs):  # noqa: E501
        """Create a new Power VM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_post_with_http_info(cloud_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param PVMInstanceCreate body: Parameters for the creation of a new Power VM Instance (required)
        :param bool skip_host_validation: Option to skip host validation on PVMInstance Create API
        :return: PVMInstanceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'body', 'skip_host_validation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501

        query_params = []
        if 'skip_host_validation' in params:
            query_params.append(('skipHostValidation', params['skip_host_validation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstanceList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_put(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Update a PCloud PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_put(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceUpdate body: Parameters to update a PCloud PVM Instance (required)
        :return: PVMInstanceUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_put_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_put_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_put_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Update a PCloud PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_put_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceUpdate body: Parameters to update a PCloud PVM Instance (required)
        :return: PVMInstanceUpdateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_put`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PVMInstanceUpdateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_snapshots_getall(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Get all snapshots for this PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_snapshots_getall(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: Snapshots
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_snapshots_getall_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_snapshots_getall_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_snapshots_getall_with_http_info(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Get all snapshots for this PVM Instance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_snapshots_getall_with_http_info(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: Snapshots
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_snapshots_getall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_snapshots_getall`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_snapshots_getall`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/snapshots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Snapshots',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_snapshots_post(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Create a PVM Instance snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_snapshots_post(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param SnapshotCreate body: PVM Instance snapshot create parameters (required)
        :return: SnapshotCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_snapshots_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_snapshots_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_snapshots_post_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Create a PVM Instance snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_snapshots_post_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param SnapshotCreate body: PVM Instance snapshot create parameters (required)
        :return: SnapshotCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_snapshots_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_snapshots_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_snapshots_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_snapshots_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnapshotCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_pvminstances_snapshots_restore_post(self, cloud_instance_id, pvm_instance_id, snapshot_id, body, **kwargs):  # noqa: E501
        """Restore a PVM Instance snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_snapshots_restore_post(cloud_instance_id, pvm_instance_id, snapshot_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param str snapshot_id: PVM Instance snapshot id (required)
        :param SnapshotRestore body: PVM Instance snapshot restore parameters (required)
        :param str restore_fail_action: Action to take on a failed snapshot restore
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_pvminstances_snapshots_restore_post_with_http_info(cloud_instance_id, pvm_instance_id, snapshot_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_pvminstances_snapshots_restore_post_with_http_info(cloud_instance_id, pvm_instance_id, snapshot_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_pvminstances_snapshots_restore_post_with_http_info(self, cloud_instance_id, pvm_instance_id, snapshot_id, body, **kwargs):  # noqa: E501
        """Restore a PVM Instance snapshot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_pvminstances_snapshots_restore_post_with_http_info(cloud_instance_id, pvm_instance_id, snapshot_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param str snapshot_id: PVM Instance snapshot id (required)
        :param SnapshotRestore body: PVM Instance snapshot restore parameters (required)
        :param str restore_fail_action: Action to take on a failed snapshot restore
        :return: Snapshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'snapshot_id', 'body', 'restore_fail_action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_pvminstances_snapshots_restore_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_pvminstances_snapshots_restore_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_pvminstances_snapshots_restore_post`")  # noqa: E501
        # verify the required parameter 'snapshot_id' is set
        if self.api_client.client_side_validation and ('snapshot_id' not in params or
                                                       params['snapshot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `snapshot_id` when calling `pcloud_pvminstances_snapshots_restore_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_pvminstances_snapshots_restore_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501
        if 'snapshot_id' in params:
            path_params['snapshot_id'] = params['snapshot_id']  # noqa: E501

        query_params = []
        if 'restore_fail_action' in params:
            query_params.append(('restore_fail_action', params['restore_fail_action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v1/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/snapshots/{snapshot_id}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Snapshot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_v2_pvminstances_capture_get(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Get detail of last capture job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_v2_pvminstances_capture_get(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_v2_pvminstances_capture_get_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_v2_pvminstances_capture_get_with_http_info(cloud_instance_id, pvm_instance_id, **kwargs)  # noqa: E501
            return data

    def pcloud_v2_pvminstances_capture_get_with_http_info(self, cloud_instance_id, pvm_instance_id, **kwargs):  # noqa: E501
        """Get detail of last capture job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_v2_pvminstances_capture_get_with_http_info(cloud_instance_id, pvm_instance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_v2_pvminstances_capture_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_v2_pvminstances_capture_get`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_v2_pvminstances_capture_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v2/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/capture', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pcloud_v2_pvminstances_capture_post(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Add a capture pvm-instance to the jobs queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_v2_pvminstances_capture_post(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceCapture body: Parameters for the capture (required)
        :return: JobReference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pcloud_v2_pvminstances_capture_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.pcloud_v2_pvminstances_capture_post_with_http_info(cloud_instance_id, pvm_instance_id, body, **kwargs)  # noqa: E501
            return data

    def pcloud_v2_pvminstances_capture_post_with_http_info(self, cloud_instance_id, pvm_instance_id, body, **kwargs):  # noqa: E501
        """Add a capture pvm-instance to the jobs queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pcloud_v2_pvminstances_capture_post_with_http_info(cloud_instance_id, pvm_instance_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_instance_id: Cloud Instance ID of a PCloud Instance (required)
        :param str pvm_instance_id: PCloud PVM Instance ID (required)
        :param PVMInstanceCapture body: Parameters for the capture (required)
        :return: JobReference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_instance_id', 'pvm_instance_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pcloud_v2_pvminstances_capture_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_instance_id' is set
        if self.api_client.client_side_validation and ('cloud_instance_id' not in params or
                                                       params['cloud_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_instance_id` when calling `pcloud_v2_pvminstances_capture_post`")  # noqa: E501
        # verify the required parameter 'pvm_instance_id' is set
        if self.api_client.client_side_validation and ('pvm_instance_id' not in params or
                                                       params['pvm_instance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pvm_instance_id` when calling `pcloud_v2_pvminstances_capture_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `pcloud_v2_pvminstances_capture_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_instance_id' in params:
            path_params['cloud_instance_id'] = params['cloud_instance_id']  # noqa: E501
        if 'pvm_instance_id' in params:
            path_params['pvm_instance_id'] = params['pvm_instance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pcloud/v2/cloud-instances/{cloud_instance_id}/pvm-instances/{pvm_instance_id}/capture', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobReference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
