# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CloudInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'usage': 'CloudInstanceUsageLimits',
        'cloud_instance_id': 'str',
        'enabled': 'bool',
        'initialized': 'bool',
        'limits': 'CloudInstanceUsageLimits',
        'pvm_instances': 'list[PVMInstanceReference]',
        'capabilities': 'list[str]',
        'name': 'str',
        'openstack_id': 'str',
        'region': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'usage': 'usage',
        'cloud_instance_id': 'cloudInstanceID',
        'enabled': 'enabled',
        'initialized': 'initialized',
        'limits': 'limits',
        'pvm_instances': 'pvmInstances',
        'capabilities': 'capabilities',
        'name': 'name',
        'openstack_id': 'openstackID',
        'region': 'region',
        'tenant_id': 'tenantID'
    }

    def __init__(self, usage=None, cloud_instance_id=None, enabled=None, initialized=None, limits=None, pvm_instances=None, capabilities=None, name=None, openstack_id=None, region=None, tenant_id=None, _configuration=None):  # noqa: E501
        """CloudInstance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._usage = None
        self._cloud_instance_id = None
        self._enabled = None
        self._initialized = None
        self._limits = None
        self._pvm_instances = None
        self._capabilities = None
        self._name = None
        self._openstack_id = None
        self._region = None
        self._tenant_id = None
        self.discriminator = None

        self.usage = usage
        self.cloud_instance_id = cloud_instance_id
        self.enabled = enabled
        self.initialized = initialized
        self.limits = limits
        self.pvm_instances = pvm_instances
        if capabilities is not None:
            self.capabilities = capabilities
        self.name = name
        self.openstack_id = openstack_id
        self.region = region
        self.tenant_id = tenant_id

    @property
    def usage(self):
        """Gets the usage of this CloudInstance.  # noqa: E501

        Current usage on the cloud instance  # noqa: E501

        :return: The usage of this CloudInstance.  # noqa: E501
        :rtype: CloudInstanceUsageLimits
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this CloudInstance.

        Current usage on the cloud instance  # noqa: E501

        :param usage: The usage of this CloudInstance.  # noqa: E501
        :type: CloudInstanceUsageLimits
        """
        if self._configuration.client_side_validation and usage is None:
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage

    @property
    def cloud_instance_id(self):
        """Gets the cloud_instance_id of this CloudInstance.  # noqa: E501

        Cloud Instance ID  # noqa: E501

        :return: The cloud_instance_id of this CloudInstance.  # noqa: E501
        :rtype: str
        """
        return self._cloud_instance_id

    @cloud_instance_id.setter
    def cloud_instance_id(self, cloud_instance_id):
        """Sets the cloud_instance_id of this CloudInstance.

        Cloud Instance ID  # noqa: E501

        :param cloud_instance_id: The cloud_instance_id of this CloudInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cloud_instance_id is None:
            raise ValueError("Invalid value for `cloud_instance_id`, must not be `None`")  # noqa: E501

        self._cloud_instance_id = cloud_instance_id

    @property
    def enabled(self):
        """Gets the enabled of this CloudInstance.  # noqa: E501

        Indicates if the cloud instance is enabled  # noqa: E501

        :return: The enabled of this CloudInstance.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CloudInstance.

        Indicates if the cloud instance is enabled  # noqa: E501

        :param enabled: The enabled of this CloudInstance.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def initialized(self):
        """Gets the initialized of this CloudInstance.  # noqa: E501

        Indicates if the cloud instance is initialized and ready for use  # noqa: E501

        :return: The initialized of this CloudInstance.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this CloudInstance.

        Indicates if the cloud instance is initialized and ready for use  # noqa: E501

        :param initialized: The initialized of this CloudInstance.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and initialized is None:
            raise ValueError("Invalid value for `initialized`, must not be `None`")  # noqa: E501

        self._initialized = initialized

    @property
    def limits(self):
        """Gets the limits of this CloudInstance.  # noqa: E501

        Limits on the cloud instance  # noqa: E501

        :return: The limits of this CloudInstance.  # noqa: E501
        :rtype: CloudInstanceUsageLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this CloudInstance.

        Limits on the cloud instance  # noqa: E501

        :param limits: The limits of this CloudInstance.  # noqa: E501
        :type: CloudInstanceUsageLimits
        """
        if self._configuration.client_side_validation and limits is None:
            raise ValueError("Invalid value for `limits`, must not be `None`")  # noqa: E501

        self._limits = limits

    @property
    def pvm_instances(self):
        """Gets the pvm_instances of this CloudInstance.  # noqa: E501

        PVM instances owned by the Cloud Instance  # noqa: E501

        :return: The pvm_instances of this CloudInstance.  # noqa: E501
        :rtype: list[PVMInstanceReference]
        """
        return self._pvm_instances

    @pvm_instances.setter
    def pvm_instances(self, pvm_instances):
        """Sets the pvm_instances of this CloudInstance.

        PVM instances owned by the Cloud Instance  # noqa: E501

        :param pvm_instances: The pvm_instances of this CloudInstance.  # noqa: E501
        :type: list[PVMInstanceReference]
        """
        if self._configuration.client_side_validation and pvm_instances is None:
            raise ValueError("Invalid value for `pvm_instances`, must not be `None`")  # noqa: E501

        self._pvm_instances = pvm_instances

    @property
    def capabilities(self):
        """Gets the capabilities of this CloudInstance.  # noqa: E501

        Cloud Instance Capabilities  # noqa: E501

        :return: The capabilities of this CloudInstance.  # noqa: E501
        :rtype: list[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this CloudInstance.

        Cloud Instance Capabilities  # noqa: E501

        :param capabilities: The capabilities of this CloudInstance.  # noqa: E501
        :type: list[str]
        """

        self._capabilities = capabilities

    @property
    def name(self):
        """Gets the name of this CloudInstance.  # noqa: E501

        Cloud Instance Name  # noqa: E501

        :return: The name of this CloudInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudInstance.

        Cloud Instance Name  # noqa: E501

        :param name: The name of this CloudInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def openstack_id(self):
        """Gets the openstack_id of this CloudInstance.  # noqa: E501

        The open stack ID that controls this cloud instance  # noqa: E501

        :return: The openstack_id of this CloudInstance.  # noqa: E501
        :rtype: str
        """
        return self._openstack_id

    @openstack_id.setter
    def openstack_id(self, openstack_id):
        """Sets the openstack_id of this CloudInstance.

        The open stack ID that controls this cloud instance  # noqa: E501

        :param openstack_id: The openstack_id of this CloudInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and openstack_id is None:
            raise ValueError("Invalid value for `openstack_id`, must not be `None`")  # noqa: E501

        self._openstack_id = openstack_id

    @property
    def region(self):
        """Gets the region of this CloudInstance.  # noqa: E501

        The region the cloud instance lives  # noqa: E501

        :return: The region of this CloudInstance.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CloudInstance.

        The region the cloud instance lives  # noqa: E501

        :param region: The region of this CloudInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CloudInstance.  # noqa: E501

        The tenant ID that owns this cloud instance  # noqa: E501

        :return: The tenant_id of this CloudInstance.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CloudInstance.

        The tenant ID that owns this cloud instance  # noqa: E501

        :param tenant_id: The tenant_id of this CloudInstance.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudInstance):
            return True

        return self.to_dict() != other.to_dict()
