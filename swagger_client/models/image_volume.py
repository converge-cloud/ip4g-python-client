# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ImageVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bootable': 'bool',
        'name': 'str',
        'size': 'float',
        'volume_id': 'str'
    }

    attribute_map = {
        'bootable': 'bootable',
        'name': 'name',
        'size': 'size',
        'volume_id': 'volumeID'
    }

    def __init__(self, bootable=None, name=None, size=None, volume_id=None, _configuration=None):  # noqa: E501
        """ImageVolume - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bootable = None
        self._name = None
        self._size = None
        self._volume_id = None
        self.discriminator = None

        self.bootable = bootable
        self.name = name
        self.size = size
        self.volume_id = volume_id

    @property
    def bootable(self):
        """Gets the bootable of this ImageVolume.  # noqa: E501

        Indicates if the volume is boot capable  # noqa: E501

        :return: The bootable of this ImageVolume.  # noqa: E501
        :rtype: bool
        """
        return self._bootable

    @bootable.setter
    def bootable(self, bootable):
        """Sets the bootable of this ImageVolume.

        Indicates if the volume is boot capable  # noqa: E501

        :param bootable: The bootable of this ImageVolume.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and bootable is None:
            raise ValueError("Invalid value for `bootable`, must not be `None`")  # noqa: E501

        self._bootable = bootable

    @property
    def name(self):
        """Gets the name of this ImageVolume.  # noqa: E501

        Volume Name  # noqa: E501

        :return: The name of this ImageVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageVolume.

        Volume Name  # noqa: E501

        :param name: The name of this ImageVolume.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def size(self):
        """Gets the size of this ImageVolume.  # noqa: E501

        Volume Size  # noqa: E501

        :return: The size of this ImageVolume.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImageVolume.

        Volume Size  # noqa: E501

        :param size: The size of this ImageVolume.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def volume_id(self):
        """Gets the volume_id of this ImageVolume.  # noqa: E501

        Volume ID  # noqa: E501

        :return: The volume_id of this ImageVolume.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this ImageVolume.

        Volume ID  # noqa: E501

        :param volume_id: The volume_id of this ImageVolume.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")  # noqa: E501

        self._volume_id = volume_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageVolume):
            return True

        return self.to_dict() != other.to_dict()
