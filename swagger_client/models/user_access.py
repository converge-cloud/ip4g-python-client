# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserAccess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notes': 'str',
        'id': 'str',
        'rev': 'str',
        'base_role': 'str',
        'cloud_instances': 'UserAccessCloudInstanceMap',
        'member_of': 'list[str]'
    }

    attribute_map = {
        'notes': 'notes',
        'id': '_id',
        'rev': '_rev',
        'base_role': 'baseRole',
        'cloud_instances': 'cloudInstances',
        'member_of': 'memberOf'
    }

    def __init__(self, notes=None, id=None, rev=None, base_role='user-readonly', cloud_instances=None, member_of=None, _configuration=None):  # noqa: E501
        """UserAccess - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._notes = None
        self._id = None
        self._rev = None
        self._base_role = None
        self._cloud_instances = None
        self._member_of = None
        self.discriminator = None

        if notes is not None:
            self.notes = notes
        if id is not None:
            self.id = id
        if rev is not None:
            self.rev = rev
        if base_role is not None:
            self.base_role = base_role
        if cloud_instances is not None:
            self.cloud_instances = cloud_instances
        if member_of is not None:
            self.member_of = member_of

    @property
    def notes(self):
        """Gets the notes of this UserAccess.  # noqa: E501

        Notes for development (not used internally)  # noqa: E501

        :return: The notes of this UserAccess.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UserAccess.

        Notes for development (not used internally)  # noqa: E501

        :param notes: The notes of this UserAccess.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def id(self):
        """Gets the id of this UserAccess.  # noqa: E501

        User ID  # noqa: E501

        :return: The id of this UserAccess.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserAccess.

        User ID  # noqa: E501

        :param id: The id of this UserAccess.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rev(self):
        """Gets the rev of this UserAccess.  # noqa: E501


        :return: The rev of this UserAccess.  # noqa: E501
        :rtype: str
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """Sets the rev of this UserAccess.


        :param rev: The rev of this UserAccess.  # noqa: E501
        :type: str
        """

        self._rev = rev

    @property
    def base_role(self):
        """Gets the base_role of this UserAccess.  # noqa: E501

        Base Role for this User  # noqa: E501

        :return: The base_role of this UserAccess.  # noqa: E501
        :rtype: str
        """
        return self._base_role

    @base_role.setter
    def base_role(self, base_role):
        """Sets the base_role of this UserAccess.

        Base Role for this User  # noqa: E501

        :param base_role: The base_role of this UserAccess.  # noqa: E501
        :type: str
        """
        allowed_values = ["user-admin", "user-readonly", "service-admin", "service-readonly", "disabled", "pending"]  # noqa: E501
        if (self._configuration.client_side_validation and
                base_role not in allowed_values):
            raise ValueError(
                "Invalid value for `base_role` ({0}), must be one of {1}"  # noqa: E501
                .format(base_role, allowed_values)
            )

        self._base_role = base_role

    @property
    def cloud_instances(self):
        """Gets the cloud_instances of this UserAccess.  # noqa: E501

        A map of cloudInstanceID to role  # noqa: E501

        :return: The cloud_instances of this UserAccess.  # noqa: E501
        :rtype: UserAccessCloudInstanceMap
        """
        return self._cloud_instances

    @cloud_instances.setter
    def cloud_instances(self, cloud_instances):
        """Sets the cloud_instances of this UserAccess.

        A map of cloudInstanceID to role  # noqa: E501

        :param cloud_instances: The cloud_instances of this UserAccess.  # noqa: E501
        :type: UserAccessCloudInstanceMap
        """

        self._cloud_instances = cloud_instances

    @property
    def member_of(self):
        """Gets the member_of of this UserAccess.  # noqa: E501

        Member of (Tenants)  # noqa: E501

        :return: The member_of of this UserAccess.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of):
        """Sets the member_of of this UserAccess.

        Member of (Tenants)  # noqa: E501

        :param member_of: The member_of of this UserAccess.  # noqa: E501
        :type: list[str]
        """

        self._member_of = member_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserAccess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserAccess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserAccess):
            return True

        return self.to_dict() != other.to_dict()
