# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CloneTaskStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failed_reason': 'str',
        'percent_complete': 'int',
        'status': 'str',
        'cloned_volumes': 'list[ClonedVolume]'
    }

    attribute_map = {
        'failed_reason': 'failedReason',
        'percent_complete': 'percentComplete',
        'status': 'status',
        'cloned_volumes': 'clonedVolumes'
    }

    def __init__(self, failed_reason=None, percent_complete=None, status=None, cloned_volumes=None, _configuration=None):  # noqa: E501
        """CloneTaskStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._failed_reason = None
        self._percent_complete = None
        self._status = None
        self._cloned_volumes = None
        self.discriminator = None

        if failed_reason is not None:
            self.failed_reason = failed_reason
        self.percent_complete = percent_complete
        self.status = status
        if cloned_volumes is not None:
            self.cloned_volumes = cloned_volumes

    @property
    def failed_reason(self):
        """Gets the failed_reason of this CloneTaskStatus.  # noqa: E501

        The reason the clone volumes task has failed  # noqa: E501

        :return: The failed_reason of this CloneTaskStatus.  # noqa: E501
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this CloneTaskStatus.

        The reason the clone volumes task has failed  # noqa: E501

        :param failed_reason: The failed_reason of this CloneTaskStatus.  # noqa: E501
        :type: str
        """

        self._failed_reason = failed_reason

    @property
    def percent_complete(self):
        """Gets the percent_complete of this CloneTaskStatus.  # noqa: E501

        Snapshot completion percentage  # noqa: E501

        :return: The percent_complete of this CloneTaskStatus.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this CloneTaskStatus.

        Snapshot completion percentage  # noqa: E501

        :param percent_complete: The percent_complete of this CloneTaskStatus.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and percent_complete is None:
            raise ValueError("Invalid value for `percent_complete`, must not be `None`")  # noqa: E501

        self._percent_complete = percent_complete

    @property
    def status(self):
        """Gets the status of this CloneTaskStatus.  # noqa: E501

        Status of the clone volumes task  # noqa: E501

        :return: The status of this CloneTaskStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CloneTaskStatus.

        Status of the clone volumes task  # noqa: E501

        :param status: The status of this CloneTaskStatus.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["running", "completed", "failed", "unknown"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def cloned_volumes(self):
        """Gets the cloned_volumes of this CloneTaskStatus.  # noqa: E501

        List of cloned volumes created from the clone volumes task  # noqa: E501

        :return: The cloned_volumes of this CloneTaskStatus.  # noqa: E501
        :rtype: list[ClonedVolume]
        """
        return self._cloned_volumes

    @cloned_volumes.setter
    def cloned_volumes(self, cloned_volumes):
        """Sets the cloned_volumes of this CloneTaskStatus.

        List of cloned volumes created from the clone volumes task  # noqa: E501

        :param cloned_volumes: The cloned_volumes of this CloneTaskStatus.  # noqa: E501
        :type: list[ClonedVolume]
        """

        self._cloned_volumes = cloned_volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloneTaskStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloneTaskStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloneTaskStatus):
            return True

        return self.to_dict() != other.to_dict()
