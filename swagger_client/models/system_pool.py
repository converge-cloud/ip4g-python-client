# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SystemPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_memory_available': 'System',
        'shared_core_ratio': 'MinMaxDefault',
        'systems': 'list[System]',
        'type': 'str',
        'capacity': 'System',
        'core_memory_ratio': 'float',
        'max_available': 'System',
        'max_cores_available': 'System'
    }

    attribute_map = {
        'max_memory_available': 'maxMemoryAvailable',
        'shared_core_ratio': 'sharedCoreRatio',
        'systems': 'systems',
        'type': 'type',
        'capacity': 'capacity',
        'core_memory_ratio': 'coreMemoryRatio',
        'max_available': 'maxAvailable',
        'max_cores_available': 'maxCoresAvailable'
    }

    def __init__(self, max_memory_available=None, shared_core_ratio=None, systems=None, type=None, capacity=None, core_memory_ratio=None, max_available=None, max_cores_available=None, _configuration=None):  # noqa: E501
        """SystemPool - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._max_memory_available = None
        self._shared_core_ratio = None
        self._systems = None
        self._type = None
        self._capacity = None
        self._core_memory_ratio = None
        self._max_available = None
        self._max_cores_available = None
        self.discriminator = None

        if max_memory_available is not None:
            self.max_memory_available = max_memory_available
        if shared_core_ratio is not None:
            self.shared_core_ratio = shared_core_ratio
        if systems is not None:
            self.systems = systems
        if type is not None:
            self.type = type
        if capacity is not None:
            self.capacity = capacity
        if core_memory_ratio is not None:
            self.core_memory_ratio = core_memory_ratio
        if max_available is not None:
            self.max_available = max_available
        if max_cores_available is not None:
            self.max_cores_available = max_cores_available

    @property
    def max_memory_available(self):
        """Gets the max_memory_available of this SystemPool.  # noqa: E501

        Maximum configurable memory available combined with available cores of that host  # noqa: E501

        :return: The max_memory_available of this SystemPool.  # noqa: E501
        :rtype: System
        """
        return self._max_memory_available

    @max_memory_available.setter
    def max_memory_available(self, max_memory_available):
        """Sets the max_memory_available of this SystemPool.

        Maximum configurable memory available combined with available cores of that host  # noqa: E501

        :param max_memory_available: The max_memory_available of this SystemPool.  # noqa: E501
        :type: System
        """

        self._max_memory_available = max_memory_available

    @property
    def shared_core_ratio(self):
        """Gets the shared_core_ratio of this SystemPool.  # noqa: E501

        min-max-default allocation percentage of shared core per vCPU  # noqa: E501

        :return: The shared_core_ratio of this SystemPool.  # noqa: E501
        :rtype: MinMaxDefault
        """
        return self._shared_core_ratio

    @shared_core_ratio.setter
    def shared_core_ratio(self, shared_core_ratio):
        """Sets the shared_core_ratio of this SystemPool.

        min-max-default allocation percentage of shared core per vCPU  # noqa: E501

        :param shared_core_ratio: The shared_core_ratio of this SystemPool.  # noqa: E501
        :type: MinMaxDefault
        """

        self._shared_core_ratio = shared_core_ratio

    @property
    def systems(self):
        """Gets the systems of this SystemPool.  # noqa: E501

        The DataCenter list of servers and their available resources  # noqa: E501

        :return: The systems of this SystemPool.  # noqa: E501
        :rtype: list[System]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this SystemPool.

        The DataCenter list of servers and their available resources  # noqa: E501

        :param systems: The systems of this SystemPool.  # noqa: E501
        :type: list[System]
        """

        self._systems = systems

    @property
    def type(self):
        """Gets the type of this SystemPool.  # noqa: E501

        Type of system hardware  # noqa: E501

        :return: The type of this SystemPool.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemPool.

        Type of system hardware  # noqa: E501

        :param type: The type of this SystemPool.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def capacity(self):
        """Gets the capacity of this SystemPool.  # noqa: E501

        Advertised capacity cores and memory (GB)  # noqa: E501

        :return: The capacity of this SystemPool.  # noqa: E501
        :rtype: System
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this SystemPool.

        Advertised capacity cores and memory (GB)  # noqa: E501

        :param capacity: The capacity of this SystemPool.  # noqa: E501
        :type: System
        """

        self._capacity = capacity

    @property
    def core_memory_ratio(self):
        """Gets the core_memory_ratio of this SystemPool.  # noqa: E501

        Processor to Memory (GB) Ratio  # noqa: E501

        :return: The core_memory_ratio of this SystemPool.  # noqa: E501
        :rtype: float
        """
        return self._core_memory_ratio

    @core_memory_ratio.setter
    def core_memory_ratio(self, core_memory_ratio):
        """Sets the core_memory_ratio of this SystemPool.

        Processor to Memory (GB) Ratio  # noqa: E501

        :param core_memory_ratio: The core_memory_ratio of this SystemPool.  # noqa: E501
        :type: float
        """

        self._core_memory_ratio = core_memory_ratio

    @property
    def max_available(self):
        """Gets the max_available of this SystemPool.  # noqa: E501

        Maximum configurable cores and memory (GB) (aggregated from all hosts)  # noqa: E501

        :return: The max_available of this SystemPool.  # noqa: E501
        :rtype: System
        """
        return self._max_available

    @max_available.setter
    def max_available(self, max_available):
        """Sets the max_available of this SystemPool.

        Maximum configurable cores and memory (GB) (aggregated from all hosts)  # noqa: E501

        :param max_available: The max_available of this SystemPool.  # noqa: E501
        :type: System
        """

        self._max_available = max_available

    @property
    def max_cores_available(self):
        """Gets the max_cores_available of this SystemPool.  # noqa: E501

        Maximum configurable cores available combined with available memory of that host  # noqa: E501

        :return: The max_cores_available of this SystemPool.  # noqa: E501
        :rtype: System
        """
        return self._max_cores_available

    @max_cores_available.setter
    def max_cores_available(self, max_cores_available):
        """Sets the max_cores_available of this SystemPool.

        Maximum configurable cores available combined with available memory of that host  # noqa: E501

        :param max_cores_available: The max_cores_available of this SystemPool.  # noqa: E501
        :type: System
        """

        self._max_cores_available = max_cores_available

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemPool):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemPool):
            return True

        return self.to_dict() != other.to_dict()
