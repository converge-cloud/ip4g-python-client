# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Snapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_date': 'datetime',
        'description': 'str',
        'last_update_date': 'datetime',
        'status': 'str',
        'snapshot_id': 'str',
        'volume_snapshots': 'dict(str, str)',
        'action': 'str',
        'name': 'str',
        'percent_complete': 'int',
        'pvm_instance_id': 'str'
    }

    attribute_map = {
        'creation_date': 'creationDate',
        'description': 'description',
        'last_update_date': 'lastUpdateDate',
        'status': 'status',
        'snapshot_id': 'snapshotID',
        'volume_snapshots': 'volumeSnapshots',
        'action': 'action',
        'name': 'name',
        'percent_complete': 'percentComplete',
        'pvm_instance_id': 'pvmInstanceID'
    }

    def __init__(self, creation_date=None, description=None, last_update_date=None, status=None, snapshot_id=None, volume_snapshots=None, action=None, name=None, percent_complete=None, pvm_instance_id=None, _configuration=None):  # noqa: E501
        """Snapshot - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creation_date = None
        self._description = None
        self._last_update_date = None
        self._status = None
        self._snapshot_id = None
        self._volume_snapshots = None
        self._action = None
        self._name = None
        self._percent_complete = None
        self._pvm_instance_id = None
        self.discriminator = None

        if creation_date is not None:
            self.creation_date = creation_date
        if description is not None:
            self.description = description
        if last_update_date is not None:
            self.last_update_date = last_update_date
        if status is not None:
            self.status = status
        self.snapshot_id = snapshot_id
        self.volume_snapshots = volume_snapshots
        if action is not None:
            self.action = action
        self.name = name
        if percent_complete is not None:
            self.percent_complete = percent_complete
        self.pvm_instance_id = pvm_instance_id

    @property
    def creation_date(self):
        """Gets the creation_date of this Snapshot.  # noqa: E501

        Creation Date  # noqa: E501

        :return: The creation_date of this Snapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Snapshot.

        Creation Date  # noqa: E501

        :param creation_date: The creation_date of this Snapshot.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this Snapshot.  # noqa: E501

        Description of the PVM instance snapshot  # noqa: E501

        :return: The description of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Snapshot.

        Description of the PVM instance snapshot  # noqa: E501

        :param description: The description of this Snapshot.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def last_update_date(self):
        """Gets the last_update_date of this Snapshot.  # noqa: E501

        Last Update Date  # noqa: E501

        :return: The last_update_date of this Snapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this Snapshot.

        Last Update Date  # noqa: E501

        :param last_update_date: The last_update_date of this Snapshot.  # noqa: E501
        :type: datetime
        """

        self._last_update_date = last_update_date

    @property
    def status(self):
        """Gets the status of this Snapshot.  # noqa: E501

        Status of the PVM instancesnapshot  # noqa: E501

        :return: The status of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Snapshot.

        Status of the PVM instancesnapshot  # noqa: E501

        :param status: The status of this Snapshot.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this Snapshot.  # noqa: E501

        ID of the PVM instance snapshot  # noqa: E501

        :return: The snapshot_id of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this Snapshot.

        ID of the PVM instance snapshot  # noqa: E501

        :param snapshot_id: The snapshot_id of this Snapshot.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and snapshot_id is None:
            raise ValueError("Invalid value for `snapshot_id`, must not be `None`")  # noqa: E501

        self._snapshot_id = snapshot_id

    @property
    def volume_snapshots(self):
        """Gets the volume_snapshots of this Snapshot.  # noqa: E501

        A map of volume snapshots included in the PVM instance snapshot  # noqa: E501

        :return: The volume_snapshots of this Snapshot.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._volume_snapshots

    @volume_snapshots.setter
    def volume_snapshots(self, volume_snapshots):
        """Sets the volume_snapshots of this Snapshot.

        A map of volume snapshots included in the PVM instance snapshot  # noqa: E501

        :param volume_snapshots: The volume_snapshots of this Snapshot.  # noqa: E501
        :type: dict(str, str)
        """
        if self._configuration.client_side_validation and volume_snapshots is None:
            raise ValueError("Invalid value for `volume_snapshots`, must not be `None`")  # noqa: E501

        self._volume_snapshots = volume_snapshots

    @property
    def action(self):
        """Gets the action of this Snapshot.  # noqa: E501

        Action performed on the instance snapshot  # noqa: E501

        :return: The action of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Snapshot.

        Action performed on the instance snapshot  # noqa: E501

        :param action: The action of this Snapshot.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def name(self):
        """Gets the name of this Snapshot.  # noqa: E501

        Name of the PVM instance snapshot  # noqa: E501

        :return: The name of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Snapshot.

        Name of the PVM instance snapshot  # noqa: E501

        :param name: The name of this Snapshot.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def percent_complete(self):
        """Gets the percent_complete of this Snapshot.  # noqa: E501

        Snapshot completion percentage  # noqa: E501

        :return: The percent_complete of this Snapshot.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this Snapshot.

        Snapshot completion percentage  # noqa: E501

        :param percent_complete: The percent_complete of this Snapshot.  # noqa: E501
        :type: int
        """

        self._percent_complete = percent_complete

    @property
    def pvm_instance_id(self):
        """Gets the pvm_instance_id of this Snapshot.  # noqa: E501

        PCloud PVM Instance ID  # noqa: E501

        :return: The pvm_instance_id of this Snapshot.  # noqa: E501
        :rtype: str
        """
        return self._pvm_instance_id

    @pvm_instance_id.setter
    def pvm_instance_id(self, pvm_instance_id):
        """Sets the pvm_instance_id of this Snapshot.

        PCloud PVM Instance ID  # noqa: E501

        :param pvm_instance_id: The pvm_instance_id of this Snapshot.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and pvm_instance_id is None:
            raise ValueError("Invalid value for `pvm_instance_id`, must not be `None`")  # noqa: E501

        self._pvm_instance_id = pvm_instance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Snapshot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Snapshot):
            return True

        return self.to_dict() != other.to_dict()
