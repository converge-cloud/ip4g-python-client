# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PVMInstanceUpdateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pin_policy': 'PinPolicy',
        'proc_type': 'str',
        'processors': 'float',
        'server_name': 'str',
        'status_url': 'str',
        'license_repository_capacity': 'int',
        'memory': 'float'
    }

    attribute_map = {
        'pin_policy': 'pinPolicy',
        'proc_type': 'procType',
        'processors': 'processors',
        'server_name': 'serverName',
        'status_url': 'statusUrl',
        'license_repository_capacity': 'licenseRepositoryCapacity',
        'memory': 'memory'
    }

    def __init__(self, pin_policy=None, proc_type=None, processors=None, server_name=None, status_url=None, license_repository_capacity=None, memory=None, _configuration=None):  # noqa: E501
        """PVMInstanceUpdateResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._pin_policy = None
        self._proc_type = None
        self._processors = None
        self._server_name = None
        self._status_url = None
        self._license_repository_capacity = None
        self._memory = None
        self.discriminator = None

        if pin_policy is not None:
            self.pin_policy = pin_policy
        if proc_type is not None:
            self.proc_type = proc_type
        if processors is not None:
            self.processors = processors
        if server_name is not None:
            self.server_name = server_name
        if status_url is not None:
            self.status_url = status_url
        if license_repository_capacity is not None:
            self.license_repository_capacity = license_repository_capacity
        if memory is not None:
            self.memory = memory

    @property
    def pin_policy(self):
        """Gets the pin_policy of this PVMInstanceUpdateResponse.  # noqa: E501


        :return: The pin_policy of this PVMInstanceUpdateResponse.  # noqa: E501
        :rtype: PinPolicy
        """
        return self._pin_policy

    @pin_policy.setter
    def pin_policy(self, pin_policy):
        """Sets the pin_policy of this PVMInstanceUpdateResponse.


        :param pin_policy: The pin_policy of this PVMInstanceUpdateResponse.  # noqa: E501
        :type: PinPolicy
        """

        self._pin_policy = pin_policy

    @property
    def proc_type(self):
        """Gets the proc_type of this PVMInstanceUpdateResponse.  # noqa: E501

        Processor type (dedicated, shared, capped)  # noqa: E501

        :return: The proc_type of this PVMInstanceUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._proc_type

    @proc_type.setter
    def proc_type(self, proc_type):
        """Sets the proc_type of this PVMInstanceUpdateResponse.

        Processor type (dedicated, shared, capped)  # noqa: E501

        :param proc_type: The proc_type of this PVMInstanceUpdateResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["dedicated", "shared", "capped"]  # noqa: E501
        if (self._configuration.client_side_validation and
                proc_type not in allowed_values):
            raise ValueError(
                "Invalid value for `proc_type` ({0}), must be one of {1}"  # noqa: E501
                .format(proc_type, allowed_values)
            )

        self._proc_type = proc_type

    @property
    def processors(self):
        """Gets the processors of this PVMInstanceUpdateResponse.  # noqa: E501

        Number of processors allocated  # noqa: E501

        :return: The processors of this PVMInstanceUpdateResponse.  # noqa: E501
        :rtype: float
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """Sets the processors of this PVMInstanceUpdateResponse.

        Number of processors allocated  # noqa: E501

        :param processors: The processors of this PVMInstanceUpdateResponse.  # noqa: E501
        :type: float
        """

        self._processors = processors

    @property
    def server_name(self):
        """Gets the server_name of this PVMInstanceUpdateResponse.  # noqa: E501

        Name of the server to create  # noqa: E501

        :return: The server_name of this PVMInstanceUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this PVMInstanceUpdateResponse.

        Name of the server to create  # noqa: E501

        :param server_name: The server_name of this PVMInstanceUpdateResponse.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def status_url(self):
        """Gets the status_url of this PVMInstanceUpdateResponse.  # noqa: E501

        URL to check for status of the operation (for now, just the URL for the GET on the server, which has status information from powervc)  # noqa: E501

        :return: The status_url of this PVMInstanceUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_url

    @status_url.setter
    def status_url(self, status_url):
        """Sets the status_url of this PVMInstanceUpdateResponse.

        URL to check for status of the operation (for now, just the URL for the GET on the server, which has status information from powervc)  # noqa: E501

        :param status_url: The status_url of this PVMInstanceUpdateResponse.  # noqa: E501
        :type: str
        """

        self._status_url = status_url

    @property
    def license_repository_capacity(self):
        """Gets the license_repository_capacity of this PVMInstanceUpdateResponse.  # noqa: E501

        The VTL license repository capacity TB value  # noqa: E501

        :return: The license_repository_capacity of this PVMInstanceUpdateResponse.  # noqa: E501
        :rtype: int
        """
        return self._license_repository_capacity

    @license_repository_capacity.setter
    def license_repository_capacity(self, license_repository_capacity):
        """Sets the license_repository_capacity of this PVMInstanceUpdateResponse.

        The VTL license repository capacity TB value  # noqa: E501

        :param license_repository_capacity: The license_repository_capacity of this PVMInstanceUpdateResponse.  # noqa: E501
        :type: int
        """

        self._license_repository_capacity = license_repository_capacity

    @property
    def memory(self):
        """Gets the memory of this PVMInstanceUpdateResponse.  # noqa: E501

        Amount of memory allocated (in GB)  # noqa: E501

        :return: The memory of this PVMInstanceUpdateResponse.  # noqa: E501
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this PVMInstanceUpdateResponse.

        Amount of memory allocated (in GB)  # noqa: E501

        :param memory: The memory of this PVMInstanceUpdateResponse.  # noqa: E501
        :type: float
        """

        self._memory = memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PVMInstanceUpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PVMInstanceUpdateResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PVMInstanceUpdateResponse):
            return True

        return self.to_dict() != other.to_dict()
