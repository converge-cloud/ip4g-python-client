# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OwnerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_code': 'str',
        'is_ib_mer': 'bool',
        'softlayer_ids': 'list[str]',
        'softlayer_subscriptions': 'list[SoftlayerSubscription]',
        'user_id': 'str',
        'currency_code': 'str',
        'email': 'str',
        'iam_id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'country_code': 'countryCode',
        'is_ib_mer': 'isIBMer',
        'softlayer_ids': 'softlayerIDs',
        'softlayer_subscriptions': 'softlayerSubscriptions',
        'user_id': 'userID',
        'currency_code': 'currencyCode',
        'email': 'email',
        'iam_id': 'iamID',
        'name': 'name'
    }

    def __init__(self, country_code=None, is_ib_mer=None, softlayer_ids=None, softlayer_subscriptions=None, user_id=None, currency_code=None, email=None, iam_id=None, name=None, _configuration=None):  # noqa: E501
        """OwnerInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._country_code = None
        self._is_ib_mer = None
        self._softlayer_ids = None
        self._softlayer_subscriptions = None
        self._user_id = None
        self._currency_code = None
        self._email = None
        self._iam_id = None
        self._name = None
        self.discriminator = None

        self.country_code = country_code
        self.is_ib_mer = is_ib_mer
        if softlayer_ids is not None:
            self.softlayer_ids = softlayer_ids
        self.softlayer_subscriptions = softlayer_subscriptions
        self.user_id = user_id
        self.currency_code = currency_code
        self.email = email
        self.iam_id = iam_id
        self.name = name

    @property
    def country_code(self):
        """Gets the country_code of this OwnerInfo.  # noqa: E501

        Country code of user  # noqa: E501

        :return: The country_code of this OwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this OwnerInfo.

        Country code of user  # noqa: E501

        :param country_code: The country_code of this OwnerInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def is_ib_mer(self):
        """Gets the is_ib_mer of this OwnerInfo.  # noqa: E501

        Indicates if user is an IBMer  # noqa: E501

        :return: The is_ib_mer of this OwnerInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_ib_mer

    @is_ib_mer.setter
    def is_ib_mer(self, is_ib_mer):
        """Sets the is_ib_mer of this OwnerInfo.

        Indicates if user is an IBMer  # noqa: E501

        :param is_ib_mer: The is_ib_mer of this OwnerInfo.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_ib_mer is None:
            raise ValueError("Invalid value for `is_ib_mer`, must not be `None`")  # noqa: E501

        self._is_ib_mer = is_ib_mer

    @property
    def softlayer_ids(self):
        """Gets the softlayer_ids of this OwnerInfo.  # noqa: E501

        (deprecated - replaced by softlayerSubscriptions) Array of Soft Layer IDs  # noqa: E501

        :return: The softlayer_ids of this OwnerInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._softlayer_ids

    @softlayer_ids.setter
    def softlayer_ids(self, softlayer_ids):
        """Sets the softlayer_ids of this OwnerInfo.

        (deprecated - replaced by softlayerSubscriptions) Array of Soft Layer IDs  # noqa: E501

        :param softlayer_ids: The softlayer_ids of this OwnerInfo.  # noqa: E501
        :type: list[str]
        """

        self._softlayer_ids = softlayer_ids

    @property
    def softlayer_subscriptions(self):
        """Gets the softlayer_subscriptions of this OwnerInfo.  # noqa: E501

        Array of softlayer subscriptions  # noqa: E501

        :return: The softlayer_subscriptions of this OwnerInfo.  # noqa: E501
        :rtype: list[SoftlayerSubscription]
        """
        return self._softlayer_subscriptions

    @softlayer_subscriptions.setter
    def softlayer_subscriptions(self, softlayer_subscriptions):
        """Sets the softlayer_subscriptions of this OwnerInfo.

        Array of softlayer subscriptions  # noqa: E501

        :param softlayer_subscriptions: The softlayer_subscriptions of this OwnerInfo.  # noqa: E501
        :type: list[SoftlayerSubscription]
        """
        if self._configuration.client_side_validation and softlayer_subscriptions is None:
            raise ValueError("Invalid value for `softlayer_subscriptions`, must not be `None`")  # noqa: E501

        self._softlayer_subscriptions = softlayer_subscriptions

    @property
    def user_id(self):
        """Gets the user_id of this OwnerInfo.  # noqa: E501

        User id of user  # noqa: E501

        :return: The user_id of this OwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OwnerInfo.

        User id of user  # noqa: E501

        :param user_id: The user_id of this OwnerInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def currency_code(self):
        """Gets the currency_code of this OwnerInfo.  # noqa: E501

        Currency code of user  # noqa: E501

        :return: The currency_code of this OwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this OwnerInfo.

        Currency code of user  # noqa: E501

        :param currency_code: The currency_code of this OwnerInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def email(self):
        """Gets the email of this OwnerInfo.  # noqa: E501

        Email address of user  # noqa: E501

        :return: The email of this OwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OwnerInfo.

        Email address of user  # noqa: E501

        :param email: The email of this OwnerInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def iam_id(self):
        """Gets the iam_id of this OwnerInfo.  # noqa: E501

        IAM id of user  # noqa: E501

        :return: The iam_id of this OwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._iam_id

    @iam_id.setter
    def iam_id(self, iam_id):
        """Sets the iam_id of this OwnerInfo.

        IAM id of user  # noqa: E501

        :param iam_id: The iam_id of this OwnerInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and iam_id is None:
            raise ValueError("Invalid value for `iam_id`, must not be `None`")  # noqa: E501

        self._iam_id = iam_id

    @property
    def name(self):
        """Gets the name of this OwnerInfo.  # noqa: E501

        Name of user  # noqa: E501

        :return: The name of this OwnerInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OwnerInfo.

        Name of user  # noqa: E501

        :param name: The name of this OwnerInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OwnerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OwnerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OwnerInfo):
            return True

        return self.to_dict() != other.to_dict()
