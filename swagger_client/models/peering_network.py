# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PeeringNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cidr': 'str',
        'dns_servers': 'list[str]',
        'project_name': 'str'
    }

    attribute_map = {
        'cidr': 'cidr',
        'dns_servers': 'dnsServers',
        'project_name': 'projectName'
    }

    def __init__(self, cidr=None, dns_servers=None, project_name=None, _configuration=None):  # noqa: E501
        """PeeringNetwork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cidr = None
        self._dns_servers = None
        self._project_name = None
        self.discriminator = None

        self.cidr = cidr
        if dns_servers is not None:
            self.dns_servers = dns_servers
        self.project_name = project_name

    @property
    def cidr(self):
        """Gets the cidr of this PeeringNetwork.  # noqa: E501

        Network in CIDR notation (192.168.0.0/24)  # noqa: E501

        :return: The cidr of this PeeringNetwork.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this PeeringNetwork.

        Network in CIDR notation (192.168.0.0/24)  # noqa: E501

        :param cidr: The cidr of this PeeringNetwork.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def dns_servers(self):
        """Gets the dns_servers of this PeeringNetwork.  # noqa: E501

        DNS Servers  # noqa: E501

        :return: The dns_servers of this PeeringNetwork.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this PeeringNetwork.

        DNS Servers  # noqa: E501

        :param dns_servers: The dns_servers of this PeeringNetwork.  # noqa: E501
        :type: list[str]
        """

        self._dns_servers = dns_servers

    @property
    def project_name(self):
        """Gets the project_name of this PeeringNetwork.  # noqa: E501

        Name of project to be peered  # noqa: E501

        :return: The project_name of this PeeringNetwork.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this PeeringNetwork.

        Name of project to be peered  # noqa: E501

        :param project_name: The project_name of this PeeringNetwork.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeeringNetwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeeringNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PeeringNetwork):
            return True

        return self.to_dict() != other.to_dict()
