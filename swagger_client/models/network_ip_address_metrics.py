# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NetworkIpAddressMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available': 'float',
        'total': 'float',
        'used': 'float',
        'utilization': 'float'
    }

    attribute_map = {
        'available': 'available',
        'total': 'total',
        'used': 'used',
        'utilization': 'utilization'
    }

    def __init__(self, available=None, total=None, used=None, utilization=None, _configuration=None):  # noqa: E501
        """NetworkIpAddressMetrics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._available = None
        self._total = None
        self._used = None
        self._utilization = None
        self.discriminator = None

        self.available = available
        self.total = total
        self.used = used
        self.utilization = utilization

    @property
    def available(self):
        """Gets the available of this NetworkIpAddressMetrics.  # noqa: E501

        Number of available IP addresses  # noqa: E501

        :return: The available of this NetworkIpAddressMetrics.  # noqa: E501
        :rtype: float
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this NetworkIpAddressMetrics.

        Number of available IP addresses  # noqa: E501

        :param available: The available of this NetworkIpAddressMetrics.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")  # noqa: E501

        self._available = available

    @property
    def total(self):
        """Gets the total of this NetworkIpAddressMetrics.  # noqa: E501

        Total number of all IP addresses in all ipAddressRanges  # noqa: E501

        :return: The total of this NetworkIpAddressMetrics.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this NetworkIpAddressMetrics.

        Total number of all IP addresses in all ipAddressRanges  # noqa: E501

        :param total: The total of this NetworkIpAddressMetrics.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def used(self):
        """Gets the used of this NetworkIpAddressMetrics.  # noqa: E501

        Number of IP addresses currently in use  # noqa: E501

        :return: The used of this NetworkIpAddressMetrics.  # noqa: E501
        :rtype: float
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this NetworkIpAddressMetrics.

        Number of IP addresses currently in use  # noqa: E501

        :param used: The used of this NetworkIpAddressMetrics.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and used is None:
            raise ValueError("Invalid value for `used`, must not be `None`")  # noqa: E501

        self._used = used

    @property
    def utilization(self):
        """Gets the utilization of this NetworkIpAddressMetrics.  # noqa: E501

        Utilization of IP addresses in percent form (used / total) [0 - 100]  # noqa: E501

        :return: The utilization of this NetworkIpAddressMetrics.  # noqa: E501
        :rtype: float
        """
        return self._utilization

    @utilization.setter
    def utilization(self, utilization):
        """Sets the utilization of this NetworkIpAddressMetrics.

        Utilization of IP addresses in percent form (used / total) [0 - 100]  # noqa: E501

        :param utilization: The utilization of this NetworkIpAddressMetrics.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and utilization is None:
            raise ValueError("Invalid value for `utilization`, must not be `None`")  # noqa: E501

        self._utilization = utilization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkIpAddressMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkIpAddressMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkIpAddressMetrics):
            return True

        return self.to_dict() != other.to_dict()
