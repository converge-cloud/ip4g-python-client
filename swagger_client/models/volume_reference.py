# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class VolumeReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wwn': 'str',
        'boot_volume': 'bool',
        'disk_type': 'str',
        'href': 'str',
        'state': 'str',
        'volume_pool': 'str',
        'group_id': 'str',
        'pvm_instance_ids': 'list[str]',
        'replication_status': 'str',
        'shareable': 'bool',
        'creation_date': 'datetime',
        'last_update_date': 'datetime',
        'size': 'float',
        'volume_type': 'str',
        'name': 'str',
        'volume_id': 'str',
        'bootable': 'bool',
        'consistency_group_name': 'str',
        'delete_on_termination': 'bool',
        'mirroring_state': 'str'
    }

    attribute_map = {
        'wwn': 'wwn',
        'boot_volume': 'bootVolume',
        'disk_type': 'diskType',
        'href': 'href',
        'state': 'state',
        'volume_pool': 'volumePool',
        'group_id': 'groupID',
        'pvm_instance_ids': 'pvmInstanceIDs',
        'replication_status': 'replicationStatus',
        'shareable': 'shareable',
        'creation_date': 'creationDate',
        'last_update_date': 'lastUpdateDate',
        'size': 'size',
        'volume_type': 'volumeType',
        'name': 'name',
        'volume_id': 'volumeID',
        'bootable': 'bootable',
        'consistency_group_name': 'consistencyGroupName',
        'delete_on_termination': 'deleteOnTermination',
        'mirroring_state': 'mirroringState'
    }

    def __init__(self, wwn=None, boot_volume=None, disk_type=None, href=None, state=None, volume_pool=None, group_id=None, pvm_instance_ids=None, replication_status=None, shareable=None, creation_date=None, last_update_date=None, size=None, volume_type=None, name=None, volume_id=None, bootable=None, consistency_group_name=None, delete_on_termination=None, mirroring_state=None, _configuration=None):  # noqa: E501
        """VolumeReference - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._wwn = None
        self._boot_volume = None
        self._disk_type = None
        self._href = None
        self._state = None
        self._volume_pool = None
        self._group_id = None
        self._pvm_instance_ids = None
        self._replication_status = None
        self._shareable = None
        self._creation_date = None
        self._last_update_date = None
        self._size = None
        self._volume_type = None
        self._name = None
        self._volume_id = None
        self._bootable = None
        self._consistency_group_name = None
        self._delete_on_termination = None
        self._mirroring_state = None
        self.discriminator = None

        self.wwn = wwn
        if boot_volume is not None:
            self.boot_volume = boot_volume
        self.disk_type = disk_type
        self.href = href
        self.state = state
        if volume_pool is not None:
            self.volume_pool = volume_pool
        if group_id is not None:
            self.group_id = group_id
        if pvm_instance_ids is not None:
            self.pvm_instance_ids = pvm_instance_ids
        if replication_status is not None:
            self.replication_status = replication_status
        self.shareable = shareable
        self.creation_date = creation_date
        self.last_update_date = last_update_date
        self.size = size
        if volume_type is not None:
            self.volume_type = volume_type
        self.name = name
        self.volume_id = volume_id
        self.bootable = bootable
        if consistency_group_name is not None:
            self.consistency_group_name = consistency_group_name
        if delete_on_termination is not None:
            self.delete_on_termination = delete_on_termination
        if mirroring_state is not None:
            self.mirroring_state = mirroring_state

    @property
    def wwn(self):
        """Gets the wwn of this VolumeReference.  # noqa: E501

        Volume world wide name  # noqa: E501

        :return: The wwn of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._wwn

    @wwn.setter
    def wwn(self, wwn):
        """Sets the wwn of this VolumeReference.

        Volume world wide name  # noqa: E501

        :param wwn: The wwn of this VolumeReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and wwn is None:
            raise ValueError("Invalid value for `wwn`, must not be `None`")  # noqa: E501

        self._wwn = wwn

    @property
    def boot_volume(self):
        """Gets the boot_volume of this VolumeReference.  # noqa: E501

        Indicates if the volume is the server's boot volume  # noqa: E501

        :return: The boot_volume of this VolumeReference.  # noqa: E501
        :rtype: bool
        """
        return self._boot_volume

    @boot_volume.setter
    def boot_volume(self, boot_volume):
        """Sets the boot_volume of this VolumeReference.

        Indicates if the volume is the server's boot volume  # noqa: E501

        :param boot_volume: The boot_volume of this VolumeReference.  # noqa: E501
        :type: bool
        """

        self._boot_volume = boot_volume

    @property
    def disk_type(self):
        """Gets the disk_type of this VolumeReference.  # noqa: E501

        Type of Disk  # noqa: E501

        :return: The disk_type of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this VolumeReference.

        Type of Disk  # noqa: E501

        :param disk_type: The disk_type of this VolumeReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and disk_type is None:
            raise ValueError("Invalid value for `disk_type`, must not be `None`")  # noqa: E501

        self._disk_type = disk_type

    @property
    def href(self):
        """Gets the href of this VolumeReference.  # noqa: E501

        Link to Volume resource  # noqa: E501

        :return: The href of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this VolumeReference.

        Link to Volume resource  # noqa: E501

        :param href: The href of this VolumeReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def state(self):
        """Gets the state of this VolumeReference.  # noqa: E501

        Volume State  # noqa: E501

        :return: The state of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VolumeReference.

        Volume State  # noqa: E501

        :param state: The state of this VolumeReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def volume_pool(self):
        """Gets the volume_pool of this VolumeReference.  # noqa: E501

        Volume pool, name of storage pool where the volume is located  # noqa: E501

        :return: The volume_pool of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._volume_pool

    @volume_pool.setter
    def volume_pool(self, volume_pool):
        """Sets the volume_pool of this VolumeReference.

        Volume pool, name of storage pool where the volume is located  # noqa: E501

        :param volume_pool: The volume_pool of this VolumeReference.  # noqa: E501
        :type: str
        """

        self._volume_pool = volume_pool

    @property
    def group_id(self):
        """Gets the group_id of this VolumeReference.  # noqa: E501

        Volume Group ID  # noqa: E501

        :return: The group_id of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this VolumeReference.

        Volume Group ID  # noqa: E501

        :param group_id: The group_id of this VolumeReference.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def pvm_instance_ids(self):
        """Gets the pvm_instance_ids of this VolumeReference.  # noqa: E501

        List of PCloud PVM Instance attached to the volume  # noqa: E501

        :return: The pvm_instance_ids of this VolumeReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._pvm_instance_ids

    @pvm_instance_ids.setter
    def pvm_instance_ids(self, pvm_instance_ids):
        """Sets the pvm_instance_ids of this VolumeReference.

        List of PCloud PVM Instance attached to the volume  # noqa: E501

        :param pvm_instance_ids: The pvm_instance_ids of this VolumeReference.  # noqa: E501
        :type: list[str]
        """

        self._pvm_instance_ids = pvm_instance_ids

    @property
    def replication_status(self):
        """Gets the replication_status of this VolumeReference.  # noqa: E501

        shows the replication status of a volume  # noqa: E501

        :return: The replication_status of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._replication_status

    @replication_status.setter
    def replication_status(self, replication_status):
        """Sets the replication_status of this VolumeReference.

        shows the replication status of a volume  # noqa: E501

        :param replication_status: The replication_status of this VolumeReference.  # noqa: E501
        :type: str
        """

        self._replication_status = replication_status

    @property
    def shareable(self):
        """Gets the shareable of this VolumeReference.  # noqa: E501

        Indicates if the volume is shareable between VMs  # noqa: E501

        :return: The shareable of this VolumeReference.  # noqa: E501
        :rtype: bool
        """
        return self._shareable

    @shareable.setter
    def shareable(self, shareable):
        """Sets the shareable of this VolumeReference.

        Indicates if the volume is shareable between VMs  # noqa: E501

        :param shareable: The shareable of this VolumeReference.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and shareable is None:
            raise ValueError("Invalid value for `shareable`, must not be `None`")  # noqa: E501

        self._shareable = shareable

    @property
    def creation_date(self):
        """Gets the creation_date of this VolumeReference.  # noqa: E501

        Creation Date  # noqa: E501

        :return: The creation_date of this VolumeReference.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this VolumeReference.

        Creation Date  # noqa: E501

        :param creation_date: The creation_date of this VolumeReference.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def last_update_date(self):
        """Gets the last_update_date of this VolumeReference.  # noqa: E501

        Last Update Date  # noqa: E501

        :return: The last_update_date of this VolumeReference.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this VolumeReference.

        Last Update Date  # noqa: E501

        :param last_update_date: The last_update_date of this VolumeReference.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and last_update_date is None:
            raise ValueError("Invalid value for `last_update_date`, must not be `None`")  # noqa: E501

        self._last_update_date = last_update_date

    @property
    def size(self):
        """Gets the size of this VolumeReference.  # noqa: E501

        Volume Size  # noqa: E501

        :return: The size of this VolumeReference.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VolumeReference.

        Volume Size  # noqa: E501

        :param size: The size of this VolumeReference.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def volume_type(self):
        """Gets the volume_type of this VolumeReference.  # noqa: E501

        Volume type, name of storage template used to create the volume  # noqa: E501

        :return: The volume_type of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this VolumeReference.

        Volume type, name of storage template used to create the volume  # noqa: E501

        :param volume_type: The volume_type of this VolumeReference.  # noqa: E501
        :type: str
        """

        self._volume_type = volume_type

    @property
    def name(self):
        """Gets the name of this VolumeReference.  # noqa: E501

        Volume Name  # noqa: E501

        :return: The name of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeReference.

        Volume Name  # noqa: E501

        :param name: The name of this VolumeReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def volume_id(self):
        """Gets the volume_id of this VolumeReference.  # noqa: E501

        Volume ID  # noqa: E501

        :return: The volume_id of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this VolumeReference.

        Volume ID  # noqa: E501

        :param volume_id: The volume_id of this VolumeReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")  # noqa: E501

        self._volume_id = volume_id

    @property
    def bootable(self):
        """Gets the bootable of this VolumeReference.  # noqa: E501

        Indicates if the volume is boot capable  # noqa: E501

        :return: The bootable of this VolumeReference.  # noqa: E501
        :rtype: bool
        """
        return self._bootable

    @bootable.setter
    def bootable(self, bootable):
        """Sets the bootable of this VolumeReference.

        Indicates if the volume is boot capable  # noqa: E501

        :param bootable: The bootable of this VolumeReference.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and bootable is None:
            raise ValueError("Invalid value for `bootable`, must not be `None`")  # noqa: E501

        self._bootable = bootable

    @property
    def consistency_group_name(self):
        """Gets the consistency_group_name of this VolumeReference.  # noqa: E501

        Consistency Group Name if volume is a part of volume group  # noqa: E501

        :return: The consistency_group_name of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._consistency_group_name

    @consistency_group_name.setter
    def consistency_group_name(self, consistency_group_name):
        """Sets the consistency_group_name of this VolumeReference.

        Consistency Group Name if volume is a part of volume group  # noqa: E501

        :param consistency_group_name: The consistency_group_name of this VolumeReference.  # noqa: E501
        :type: str
        """

        self._consistency_group_name = consistency_group_name

    @property
    def delete_on_termination(self):
        """Gets the delete_on_termination of this VolumeReference.  # noqa: E501

        Indicates if the volume should be deleted when the server terminates  # noqa: E501

        :return: The delete_on_termination of this VolumeReference.  # noqa: E501
        :rtype: bool
        """
        return self._delete_on_termination

    @delete_on_termination.setter
    def delete_on_termination(self, delete_on_termination):
        """Sets the delete_on_termination of this VolumeReference.

        Indicates if the volume should be deleted when the server terminates  # noqa: E501

        :param delete_on_termination: The delete_on_termination of this VolumeReference.  # noqa: E501
        :type: bool
        """

        self._delete_on_termination = delete_on_termination

    @property
    def mirroring_state(self):
        """Gets the mirroring_state of this VolumeReference.  # noqa: E501

        mirroring state for replication enabled volume  # noqa: E501

        :return: The mirroring_state of this VolumeReference.  # noqa: E501
        :rtype: str
        """
        return self._mirroring_state

    @mirroring_state.setter
    def mirroring_state(self, mirroring_state):
        """Sets the mirroring_state of this VolumeReference.

        mirroring state for replication enabled volume  # noqa: E501

        :param mirroring_state: The mirroring_state of this VolumeReference.  # noqa: E501
        :type: str
        """

        self._mirroring_state = mirroring_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumeReference):
            return True

        return self.to_dict() != other.to_dict()
