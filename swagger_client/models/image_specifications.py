# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ImageSpecifications(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_format': 'str',
        'disk_format': 'str',
        'endianness': 'str',
        'hypervisor_type': 'str',
        'image_type': 'str',
        'operating_system': 'str',
        'architecture': 'str'
    }

    attribute_map = {
        'container_format': 'containerFormat',
        'disk_format': 'diskFormat',
        'endianness': 'endianness',
        'hypervisor_type': 'hypervisorType',
        'image_type': 'imageType',
        'operating_system': 'operatingSystem',
        'architecture': 'architecture'
    }

    def __init__(self, container_format=None, disk_format=None, endianness=None, hypervisor_type=None, image_type=None, operating_system=None, architecture=None, _configuration=None):  # noqa: E501
        """ImageSpecifications - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._container_format = None
        self._disk_format = None
        self._endianness = None
        self._hypervisor_type = None
        self._image_type = None
        self._operating_system = None
        self._architecture = None
        self.discriminator = None

        if container_format is not None:
            self.container_format = container_format
        if disk_format is not None:
            self.disk_format = disk_format
        if endianness is not None:
            self.endianness = endianness
        if hypervisor_type is not None:
            self.hypervisor_type = hypervisor_type
        if image_type is not None:
            self.image_type = image_type
        if operating_system is not None:
            self.operating_system = operating_system
        if architecture is not None:
            self.architecture = architecture

    @property
    def container_format(self):
        """Gets the container_format of this ImageSpecifications.  # noqa: E501

        Container Format  # noqa: E501

        :return: The container_format of this ImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._container_format

    @container_format.setter
    def container_format(self, container_format):
        """Sets the container_format of this ImageSpecifications.

        Container Format  # noqa: E501

        :param container_format: The container_format of this ImageSpecifications.  # noqa: E501
        :type: str
        """

        self._container_format = container_format

    @property
    def disk_format(self):
        """Gets the disk_format of this ImageSpecifications.  # noqa: E501

        Disk Format  # noqa: E501

        :return: The disk_format of this ImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._disk_format

    @disk_format.setter
    def disk_format(self, disk_format):
        """Sets the disk_format of this ImageSpecifications.

        Disk Format  # noqa: E501

        :param disk_format: The disk_format of this ImageSpecifications.  # noqa: E501
        :type: str
        """

        self._disk_format = disk_format

    @property
    def endianness(self):
        """Gets the endianness of this ImageSpecifications.  # noqa: E501

        Endianness  # noqa: E501

        :return: The endianness of this ImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._endianness

    @endianness.setter
    def endianness(self, endianness):
        """Sets the endianness of this ImageSpecifications.

        Endianness  # noqa: E501

        :param endianness: The endianness of this ImageSpecifications.  # noqa: E501
        :type: str
        """

        self._endianness = endianness

    @property
    def hypervisor_type(self):
        """Gets the hypervisor_type of this ImageSpecifications.  # noqa: E501

        Hypervisor Type  # noqa: E501

        :return: The hypervisor_type of this ImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._hypervisor_type

    @hypervisor_type.setter
    def hypervisor_type(self, hypervisor_type):
        """Sets the hypervisor_type of this ImageSpecifications.

        Hypervisor Type  # noqa: E501

        :param hypervisor_type: The hypervisor_type of this ImageSpecifications.  # noqa: E501
        :type: str
        """

        self._hypervisor_type = hypervisor_type

    @property
    def image_type(self):
        """Gets the image_type of this ImageSpecifications.  # noqa: E501

        Image Type  # noqa: E501

        :return: The image_type of this ImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this ImageSpecifications.

        Image Type  # noqa: E501

        :param image_type: The image_type of this ImageSpecifications.  # noqa: E501
        :type: str
        """

        self._image_type = image_type

    @property
    def operating_system(self):
        """Gets the operating_system of this ImageSpecifications.  # noqa: E501

        Operating System  # noqa: E501

        :return: The operating_system of this ImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this ImageSpecifications.

        Operating System  # noqa: E501

        :param operating_system: The operating_system of this ImageSpecifications.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def architecture(self):
        """Gets the architecture of this ImageSpecifications.  # noqa: E501

        Architecture  # noqa: E501

        :return: The architecture of this ImageSpecifications.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this ImageSpecifications.

        Architecture  # noqa: E501

        :param architecture: The architecture of this ImageSpecifications.  # noqa: E501
        :type: str
        """

        self._architecture = architecture

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageSpecifications, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageSpecifications):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageSpecifications):
            return True

        return self.to_dict() != other.to_dict()
