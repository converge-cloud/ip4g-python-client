# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PVMInstanceReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'storage_pool': 'str',
        'updated_date': 'datetime',
        'disk_size': 'float',
        'fault': 'PVMInstanceFault',
        'srcs': 'list[list[SRC]]',
        'status': 'str',
        'minmem': 'float',
        'virtual_cores': 'VirtualCores',
        'networks': 'list[PVMInstanceNetwork]',
        'addresses': 'list[PVMInstanceNetwork]',
        'license_repository_capacity': 'int',
        'maxproc': 'float',
        'memory': 'float',
        'processors': 'float',
        'storage_type': 'str',
        'href': 'str',
        'image_id': 'str',
        'operating_system': 'str',
        'placement_group': 'str',
        'software_licenses': 'SoftwareLicenses',
        'storage_pool_affinity': 'bool',
        'sys_type': 'str',
        'console_language': 'ConsoleLanguage',
        'os_type': 'str',
        'progress': 'float',
        'sap_profile': 'SAPProfileReference',
        'minproc': 'float',
        'creation_date': 'datetime',
        'maxmem': 'float',
        'proc_type': 'str',
        'pvm_instance_id': 'str',
        'health': 'PVMInstanceHealth',
        'host_id': 'int',
        'pin_policy': 'str',
        'server_name': 'str'
    }

    attribute_map = {
        'storage_pool': 'storagePool',
        'updated_date': 'updatedDate',
        'disk_size': 'diskSize',
        'fault': 'fault',
        'srcs': 'srcs',
        'status': 'status',
        'minmem': 'minmem',
        'virtual_cores': 'virtualCores',
        'networks': 'networks',
        'addresses': 'addresses',
        'license_repository_capacity': 'licenseRepositoryCapacity',
        'maxproc': 'maxproc',
        'memory': 'memory',
        'processors': 'processors',
        'storage_type': 'storageType',
        'href': 'href',
        'image_id': 'imageID',
        'operating_system': 'operatingSystem',
        'placement_group': 'placementGroup',
        'software_licenses': 'softwareLicenses',
        'storage_pool_affinity': 'storagePoolAffinity',
        'sys_type': 'sysType',
        'console_language': 'consoleLanguage',
        'os_type': 'osType',
        'progress': 'progress',
        'sap_profile': 'sapProfile',
        'minproc': 'minproc',
        'creation_date': 'creationDate',
        'maxmem': 'maxmem',
        'proc_type': 'procType',
        'pvm_instance_id': 'pvmInstanceID',
        'health': 'health',
        'host_id': 'hostID',
        'pin_policy': 'pinPolicy',
        'server_name': 'serverName'
    }

    def __init__(self, storage_pool=None, updated_date=None, disk_size=None, fault=None, srcs=None, status=None, minmem=None, virtual_cores=None, networks=None, addresses=None, license_repository_capacity=None, maxproc=None, memory=None, processors=None, storage_type=None, href=None, image_id=None, operating_system=None, placement_group='none', software_licenses=None, storage_pool_affinity=True, sys_type=None, console_language=None, os_type=None, progress=None, sap_profile=None, minproc=None, creation_date=None, maxmem=None, proc_type='dedicated', pvm_instance_id=None, health=None, host_id=None, pin_policy=None, server_name=None, _configuration=None):  # noqa: E501
        """PVMInstanceReference - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._storage_pool = None
        self._updated_date = None
        self._disk_size = None
        self._fault = None
        self._srcs = None
        self._status = None
        self._minmem = None
        self._virtual_cores = None
        self._networks = None
        self._addresses = None
        self._license_repository_capacity = None
        self._maxproc = None
        self._memory = None
        self._processors = None
        self._storage_type = None
        self._href = None
        self._image_id = None
        self._operating_system = None
        self._placement_group = None
        self._software_licenses = None
        self._storage_pool_affinity = None
        self._sys_type = None
        self._console_language = None
        self._os_type = None
        self._progress = None
        self._sap_profile = None
        self._minproc = None
        self._creation_date = None
        self._maxmem = None
        self._proc_type = None
        self._pvm_instance_id = None
        self._health = None
        self._host_id = None
        self._pin_policy = None
        self._server_name = None
        self.discriminator = None

        if storage_pool is not None:
            self.storage_pool = storage_pool
        if updated_date is not None:
            self.updated_date = updated_date
        self.disk_size = disk_size
        if fault is not None:
            self.fault = fault
        if srcs is not None:
            self.srcs = srcs
        self.status = status
        if minmem is not None:
            self.minmem = minmem
        if virtual_cores is not None:
            self.virtual_cores = virtual_cores
        if networks is not None:
            self.networks = networks
        if addresses is not None:
            self.addresses = addresses
        if license_repository_capacity is not None:
            self.license_repository_capacity = license_repository_capacity
        if maxproc is not None:
            self.maxproc = maxproc
        self.memory = memory
        self.processors = processors
        if storage_type is not None:
            self.storage_type = storage_type
        self.href = href
        self.image_id = image_id
        if operating_system is not None:
            self.operating_system = operating_system
        if placement_group is not None:
            self.placement_group = placement_group
        if software_licenses is not None:
            self.software_licenses = software_licenses
        if storage_pool_affinity is not None:
            self.storage_pool_affinity = storage_pool_affinity
        if sys_type is not None:
            self.sys_type = sys_type
        if console_language is not None:
            self.console_language = console_language
        self.os_type = os_type
        if progress is not None:
            self.progress = progress
        if sap_profile is not None:
            self.sap_profile = sap_profile
        if minproc is not None:
            self.minproc = minproc
        if creation_date is not None:
            self.creation_date = creation_date
        if maxmem is not None:
            self.maxmem = maxmem
        self.proc_type = proc_type
        self.pvm_instance_id = pvm_instance_id
        if health is not None:
            self.health = health
        if host_id is not None:
            self.host_id = host_id
        if pin_policy is not None:
            self.pin_policy = pin_policy
        self.server_name = server_name

    @property
    def storage_pool(self):
        """Gets the storage_pool of this PVMInstanceReference.  # noqa: E501

        Storage Pool where server is deployed  # noqa: E501

        :return: The storage_pool of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._storage_pool

    @storage_pool.setter
    def storage_pool(self, storage_pool):
        """Sets the storage_pool of this PVMInstanceReference.

        Storage Pool where server is deployed  # noqa: E501

        :param storage_pool: The storage_pool of this PVMInstanceReference.  # noqa: E501
        :type: str
        """

        self._storage_pool = storage_pool

    @property
    def updated_date(self):
        """Gets the updated_date of this PVMInstanceReference.  # noqa: E501

        Date/Time of PVM last update  # noqa: E501

        :return: The updated_date of this PVMInstanceReference.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this PVMInstanceReference.

        Date/Time of PVM last update  # noqa: E501

        :param updated_date: The updated_date of this PVMInstanceReference.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def disk_size(self):
        """Gets the disk_size of this PVMInstanceReference.  # noqa: E501

        Size of allocated disk (in GB)  # noqa: E501

        :return: The disk_size of this PVMInstanceReference.  # noqa: E501
        :rtype: float
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this PVMInstanceReference.

        Size of allocated disk (in GB)  # noqa: E501

        :param disk_size: The disk_size of this PVMInstanceReference.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and disk_size is None:
            raise ValueError("Invalid value for `disk_size`, must not be `None`")  # noqa: E501

        self._disk_size = disk_size

    @property
    def fault(self):
        """Gets the fault of this PVMInstanceReference.  # noqa: E501


        :return: The fault of this PVMInstanceReference.  # noqa: E501
        :rtype: PVMInstanceFault
        """
        return self._fault

    @fault.setter
    def fault(self, fault):
        """Sets the fault of this PVMInstanceReference.


        :param fault: The fault of this PVMInstanceReference.  # noqa: E501
        :type: PVMInstanceFault
        """

        self._fault = fault

    @property
    def srcs(self):
        """Gets the srcs of this PVMInstanceReference.  # noqa: E501

        The pvm instance SRC lists  # noqa: E501

        :return: The srcs of this PVMInstanceReference.  # noqa: E501
        :rtype: list[list[SRC]]
        """
        return self._srcs

    @srcs.setter
    def srcs(self, srcs):
        """Sets the srcs of this PVMInstanceReference.

        The pvm instance SRC lists  # noqa: E501

        :param srcs: The srcs of this PVMInstanceReference.  # noqa: E501
        :type: list[list[SRC]]
        """

        self._srcs = srcs

    @property
    def status(self):
        """Gets the status of this PVMInstanceReference.  # noqa: E501

        The status of the instance  # noqa: E501

        :return: The status of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PVMInstanceReference.

        The status of the instance  # noqa: E501

        :param status: The status of this PVMInstanceReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def minmem(self):
        """Gets the minmem of this PVMInstanceReference.  # noqa: E501

        Minimum amount of memory that can be allocated (in GB, for resize)  # noqa: E501

        :return: The minmem of this PVMInstanceReference.  # noqa: E501
        :rtype: float
        """
        return self._minmem

    @minmem.setter
    def minmem(self, minmem):
        """Sets the minmem of this PVMInstanceReference.

        Minimum amount of memory that can be allocated (in GB, for resize)  # noqa: E501

        :param minmem: The minmem of this PVMInstanceReference.  # noqa: E501
        :type: float
        """

        self._minmem = minmem

    @property
    def virtual_cores(self):
        """Gets the virtual_cores of this PVMInstanceReference.  # noqa: E501

        The pvm instance virtual CPU information  # noqa: E501

        :return: The virtual_cores of this PVMInstanceReference.  # noqa: E501
        :rtype: VirtualCores
        """
        return self._virtual_cores

    @virtual_cores.setter
    def virtual_cores(self, virtual_cores):
        """Sets the virtual_cores of this PVMInstanceReference.

        The pvm instance virtual CPU information  # noqa: E501

        :param virtual_cores: The virtual_cores of this PVMInstanceReference.  # noqa: E501
        :type: VirtualCores
        """

        self._virtual_cores = virtual_cores

    @property
    def networks(self):
        """Gets the networks of this PVMInstanceReference.  # noqa: E501

        The list of addresses and their network information  # noqa: E501

        :return: The networks of this PVMInstanceReference.  # noqa: E501
        :rtype: list[PVMInstanceNetwork]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this PVMInstanceReference.

        The list of addresses and their network information  # noqa: E501

        :param networks: The networks of this PVMInstanceReference.  # noqa: E501
        :type: list[PVMInstanceNetwork]
        """

        self._networks = networks

    @property
    def addresses(self):
        """Gets the addresses of this PVMInstanceReference.  # noqa: E501

        (deprecated - replaced by networks) The list of addresses and their network information  # noqa: E501

        :return: The addresses of this PVMInstanceReference.  # noqa: E501
        :rtype: list[PVMInstanceNetwork]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this PVMInstanceReference.

        (deprecated - replaced by networks) The list of addresses and their network information  # noqa: E501

        :param addresses: The addresses of this PVMInstanceReference.  # noqa: E501
        :type: list[PVMInstanceNetwork]
        """

        self._addresses = addresses

    @property
    def license_repository_capacity(self):
        """Gets the license_repository_capacity of this PVMInstanceReference.  # noqa: E501

        The VTL license repository capacity TB value  # noqa: E501

        :return: The license_repository_capacity of this PVMInstanceReference.  # noqa: E501
        :rtype: int
        """
        return self._license_repository_capacity

    @license_repository_capacity.setter
    def license_repository_capacity(self, license_repository_capacity):
        """Sets the license_repository_capacity of this PVMInstanceReference.

        The VTL license repository capacity TB value  # noqa: E501

        :param license_repository_capacity: The license_repository_capacity of this PVMInstanceReference.  # noqa: E501
        :type: int
        """

        self._license_repository_capacity = license_repository_capacity

    @property
    def maxproc(self):
        """Gets the maxproc of this PVMInstanceReference.  # noqa: E501

        Maximum number of processors that can be allocated (for resize)  # noqa: E501

        :return: The maxproc of this PVMInstanceReference.  # noqa: E501
        :rtype: float
        """
        return self._maxproc

    @maxproc.setter
    def maxproc(self, maxproc):
        """Sets the maxproc of this PVMInstanceReference.

        Maximum number of processors that can be allocated (for resize)  # noqa: E501

        :param maxproc: The maxproc of this PVMInstanceReference.  # noqa: E501
        :type: float
        """

        self._maxproc = maxproc

    @property
    def memory(self):
        """Gets the memory of this PVMInstanceReference.  # noqa: E501

        Amount of memory allocated (in GB)  # noqa: E501

        :return: The memory of this PVMInstanceReference.  # noqa: E501
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this PVMInstanceReference.

        Amount of memory allocated (in GB)  # noqa: E501

        :param memory: The memory of this PVMInstanceReference.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")  # noqa: E501

        self._memory = memory

    @property
    def processors(self):
        """Gets the processors of this PVMInstanceReference.  # noqa: E501

        Number of processors allocated  # noqa: E501

        :return: The processors of this PVMInstanceReference.  # noqa: E501
        :rtype: float
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """Sets the processors of this PVMInstanceReference.

        Number of processors allocated  # noqa: E501

        :param processors: The processors of this PVMInstanceReference.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and processors is None:
            raise ValueError("Invalid value for `processors`, must not be `None`")  # noqa: E501

        self._processors = processors

    @property
    def storage_type(self):
        """Gets the storage_type of this PVMInstanceReference.  # noqa: E501

        Storage type of the deployment storage pool  # noqa: E501

        :return: The storage_type of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this PVMInstanceReference.

        Storage type of the deployment storage pool  # noqa: E501

        :param storage_type: The storage_type of this PVMInstanceReference.  # noqa: E501
        :type: str
        """

        self._storage_type = storage_type

    @property
    def href(self):
        """Gets the href of this PVMInstanceReference.  # noqa: E501

        Link to Cloud Instance resource  # noqa: E501

        :return: The href of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PVMInstanceReference.

        Link to Cloud Instance resource  # noqa: E501

        :param href: The href of this PVMInstanceReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def image_id(self):
        """Gets the image_id of this PVMInstanceReference.  # noqa: E501

        The ImageID used by the server  # noqa: E501

        :return: The image_id of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this PVMInstanceReference.

        The ImageID used by the server  # noqa: E501

        :param image_id: The image_id of this PVMInstanceReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")  # noqa: E501

        self._image_id = image_id

    @property
    def operating_system(self):
        """Gets the operating_system of this PVMInstanceReference.  # noqa: E501

        OS system information (usually version and build)  # noqa: E501

        :return: The operating_system of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this PVMInstanceReference.

        OS system information (usually version and build)  # noqa: E501

        :param operating_system: The operating_system of this PVMInstanceReference.  # noqa: E501
        :type: str
        """

        self._operating_system = operating_system

    @property
    def placement_group(self):
        """Gets the placement_group of this PVMInstanceReference.  # noqa: E501

        The placement group of the server  # noqa: E501

        :return: The placement_group of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._placement_group

    @placement_group.setter
    def placement_group(self, placement_group):
        """Sets the placement_group of this PVMInstanceReference.

        The placement group of the server  # noqa: E501

        :param placement_group: The placement_group of this PVMInstanceReference.  # noqa: E501
        :type: str
        """

        self._placement_group = placement_group

    @property
    def software_licenses(self):
        """Gets the software_licenses of this PVMInstanceReference.  # noqa: E501

        The pvm instance Software Licenses  # noqa: E501

        :return: The software_licenses of this PVMInstanceReference.  # noqa: E501
        :rtype: SoftwareLicenses
        """
        return self._software_licenses

    @software_licenses.setter
    def software_licenses(self, software_licenses):
        """Sets the software_licenses of this PVMInstanceReference.

        The pvm instance Software Licenses  # noqa: E501

        :param software_licenses: The software_licenses of this PVMInstanceReference.  # noqa: E501
        :type: SoftwareLicenses
        """

        self._software_licenses = software_licenses

    @property
    def storage_pool_affinity(self):
        """Gets the storage_pool_affinity of this PVMInstanceReference.  # noqa: E501

        Indicates if all volumes attached to the server must reside in the same storage pool  # noqa: E501

        :return: The storage_pool_affinity of this PVMInstanceReference.  # noqa: E501
        :rtype: bool
        """
        return self._storage_pool_affinity

    @storage_pool_affinity.setter
    def storage_pool_affinity(self, storage_pool_affinity):
        """Sets the storage_pool_affinity of this PVMInstanceReference.

        Indicates if all volumes attached to the server must reside in the same storage pool  # noqa: E501

        :param storage_pool_affinity: The storage_pool_affinity of this PVMInstanceReference.  # noqa: E501
        :type: bool
        """

        self._storage_pool_affinity = storage_pool_affinity

    @property
    def sys_type(self):
        """Gets the sys_type of this PVMInstanceReference.  # noqa: E501

        System type used to host the instance  # noqa: E501

        :return: The sys_type of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._sys_type

    @sys_type.setter
    def sys_type(self, sys_type):
        """Sets the sys_type of this PVMInstanceReference.

        System type used to host the instance  # noqa: E501

        :param sys_type: The sys_type of this PVMInstanceReference.  # noqa: E501
        :type: str
        """

        self._sys_type = sys_type

    @property
    def console_language(self):
        """Gets the console_language of this PVMInstanceReference.  # noqa: E501

        Console language and code  # noqa: E501

        :return: The console_language of this PVMInstanceReference.  # noqa: E501
        :rtype: ConsoleLanguage
        """
        return self._console_language

    @console_language.setter
    def console_language(self, console_language):
        """Sets the console_language of this PVMInstanceReference.

        Console language and code  # noqa: E501

        :param console_language: The console_language of this PVMInstanceReference.  # noqa: E501
        :type: ConsoleLanguage
        """

        self._console_language = console_language

    @property
    def os_type(self):
        """Gets the os_type of this PVMInstanceReference.  # noqa: E501

        Type of the OS [aix, ibmi, rhel, sles, vtl]  # noqa: E501

        :return: The os_type of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this PVMInstanceReference.

        Type of the OS [aix, ibmi, rhel, sles, vtl]  # noqa: E501

        :param os_type: The os_type of this PVMInstanceReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and os_type is None:
            raise ValueError("Invalid value for `os_type`, must not be `None`")  # noqa: E501

        self._os_type = os_type

    @property
    def progress(self):
        """Gets the progress of this PVMInstanceReference.  # noqa: E501

        The progress of an operation  # noqa: E501

        :return: The progress of this PVMInstanceReference.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this PVMInstanceReference.

        The progress of an operation  # noqa: E501

        :param progress: The progress of this PVMInstanceReference.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def sap_profile(self):
        """Gets the sap_profile of this PVMInstanceReference.  # noqa: E501

        If this is an SAP pvm-instance the profile reference will link to the SAP profile  # noqa: E501

        :return: The sap_profile of this PVMInstanceReference.  # noqa: E501
        :rtype: SAPProfileReference
        """
        return self._sap_profile

    @sap_profile.setter
    def sap_profile(self, sap_profile):
        """Sets the sap_profile of this PVMInstanceReference.

        If this is an SAP pvm-instance the profile reference will link to the SAP profile  # noqa: E501

        :param sap_profile: The sap_profile of this PVMInstanceReference.  # noqa: E501
        :type: SAPProfileReference
        """

        self._sap_profile = sap_profile

    @property
    def minproc(self):
        """Gets the minproc of this PVMInstanceReference.  # noqa: E501

        Minimum number of processors that can be allocated (for resize)  # noqa: E501

        :return: The minproc of this PVMInstanceReference.  # noqa: E501
        :rtype: float
        """
        return self._minproc

    @minproc.setter
    def minproc(self, minproc):
        """Sets the minproc of this PVMInstanceReference.

        Minimum number of processors that can be allocated (for resize)  # noqa: E501

        :param minproc: The minproc of this PVMInstanceReference.  # noqa: E501
        :type: float
        """

        self._minproc = minproc

    @property
    def creation_date(self):
        """Gets the creation_date of this PVMInstanceReference.  # noqa: E501

        Date/Time of PVM creation  # noqa: E501

        :return: The creation_date of this PVMInstanceReference.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this PVMInstanceReference.

        Date/Time of PVM creation  # noqa: E501

        :param creation_date: The creation_date of this PVMInstanceReference.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def maxmem(self):
        """Gets the maxmem of this PVMInstanceReference.  # noqa: E501

        Maximum amount of memory that can be allocated (in GB, for resize)  # noqa: E501

        :return: The maxmem of this PVMInstanceReference.  # noqa: E501
        :rtype: float
        """
        return self._maxmem

    @maxmem.setter
    def maxmem(self, maxmem):
        """Sets the maxmem of this PVMInstanceReference.

        Maximum amount of memory that can be allocated (in GB, for resize)  # noqa: E501

        :param maxmem: The maxmem of this PVMInstanceReference.  # noqa: E501
        :type: float
        """

        self._maxmem = maxmem

    @property
    def proc_type(self):
        """Gets the proc_type of this PVMInstanceReference.  # noqa: E501

        Processor type (dedicated, shared, capped)  # noqa: E501

        :return: The proc_type of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._proc_type

    @proc_type.setter
    def proc_type(self, proc_type):
        """Sets the proc_type of this PVMInstanceReference.

        Processor type (dedicated, shared, capped)  # noqa: E501

        :param proc_type: The proc_type of this PVMInstanceReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and proc_type is None:
            raise ValueError("Invalid value for `proc_type`, must not be `None`")  # noqa: E501
        allowed_values = ["dedicated", "shared", "capped"]  # noqa: E501
        if (self._configuration.client_side_validation and
                proc_type not in allowed_values):
            raise ValueError(
                "Invalid value for `proc_type` ({0}), must be one of {1}"  # noqa: E501
                .format(proc_type, allowed_values)
            )

        self._proc_type = proc_type

    @property
    def pvm_instance_id(self):
        """Gets the pvm_instance_id of this PVMInstanceReference.  # noqa: E501

        PCloud PVM Instance ID  # noqa: E501

        :return: The pvm_instance_id of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._pvm_instance_id

    @pvm_instance_id.setter
    def pvm_instance_id(self, pvm_instance_id):
        """Sets the pvm_instance_id of this PVMInstanceReference.

        PCloud PVM Instance ID  # noqa: E501

        :param pvm_instance_id: The pvm_instance_id of this PVMInstanceReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and pvm_instance_id is None:
            raise ValueError("Invalid value for `pvm_instance_id`, must not be `None`")  # noqa: E501

        self._pvm_instance_id = pvm_instance_id

    @property
    def health(self):
        """Gets the health of this PVMInstanceReference.  # noqa: E501


        :return: The health of this PVMInstanceReference.  # noqa: E501
        :rtype: PVMInstanceHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this PVMInstanceReference.


        :param health: The health of this PVMInstanceReference.  # noqa: E501
        :type: PVMInstanceHealth
        """

        self._health = health

    @property
    def host_id(self):
        """Gets the host_id of this PVMInstanceReference.  # noqa: E501

        The PVM Instance Host ID (Internal Use Only)  # noqa: E501

        :return: The host_id of this PVMInstanceReference.  # noqa: E501
        :rtype: int
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this PVMInstanceReference.

        The PVM Instance Host ID (Internal Use Only)  # noqa: E501

        :param host_id: The host_id of this PVMInstanceReference.  # noqa: E501
        :type: int
        """

        self._host_id = host_id

    @property
    def pin_policy(self):
        """Gets the pin_policy of this PVMInstanceReference.  # noqa: E501

        VM pinning policy to use [none, soft, hard]  # noqa: E501

        :return: The pin_policy of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._pin_policy

    @pin_policy.setter
    def pin_policy(self, pin_policy):
        """Sets the pin_policy of this PVMInstanceReference.

        VM pinning policy to use [none, soft, hard]  # noqa: E501

        :param pin_policy: The pin_policy of this PVMInstanceReference.  # noqa: E501
        :type: str
        """

        self._pin_policy = pin_policy

    @property
    def server_name(self):
        """Gets the server_name of this PVMInstanceReference.  # noqa: E501

        Name of the server  # noqa: E501

        :return: The server_name of this PVMInstanceReference.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this PVMInstanceReference.

        Name of the server  # noqa: E501

        :param server_name: The server_name of this PVMInstanceReference.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and server_name is None:
            raise ValueError("Invalid value for `server_name`, must not be `None`")  # noqa: E501

        self._server_name = server_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PVMInstanceReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PVMInstanceReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PVMInstanceReference):
            return True

        return self.to_dict() != other.to_dict()
