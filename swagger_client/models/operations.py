# coding: utf-8

"""
    IBM Power Systems for Google Cloud API

    IBM Power Systems for Google Cloud API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: ip4g@convergetp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Operations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_mode': 'str',
        'operating_mode': 'str',
        'task': 'str'
    }

    attribute_map = {
        'boot_mode': 'bootMode',
        'operating_mode': 'operatingMode',
        'task': 'task'
    }

    def __init__(self, boot_mode=None, operating_mode=None, task=None, _configuration=None):  # noqa: E501
        """Operations - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._boot_mode = None
        self._operating_mode = None
        self._task = None
        self.discriminator = None

        if boot_mode is not None:
            self.boot_mode = boot_mode
        if operating_mode is not None:
            self.operating_mode = operating_mode
        if task is not None:
            self.task = task

    @property
    def boot_mode(self):
        """Gets the boot_mode of this Operations.  # noqa: E501

        Name of the server boot mode a(Boot from disk using copy A), b(Boot from disk using copy B), c(Reserved for IBM lab use only), d(Boot from media/drives)  # noqa: E501

        :return: The boot_mode of this Operations.  # noqa: E501
        :rtype: str
        """
        return self._boot_mode

    @boot_mode.setter
    def boot_mode(self, boot_mode):
        """Sets the boot_mode of this Operations.

        Name of the server boot mode a(Boot from disk using copy A), b(Boot from disk using copy B), c(Reserved for IBM lab use only), d(Boot from media/drives)  # noqa: E501

        :param boot_mode: The boot_mode of this Operations.  # noqa: E501
        :type: str
        """
        allowed_values = ["a", "b", "c", "d"]  # noqa: E501
        if (self._configuration.client_side_validation and
                boot_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `boot_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(boot_mode, allowed_values)
            )

        self._boot_mode = boot_mode

    @property
    def operating_mode(self):
        """Gets the operating_mode of this Operations.  # noqa: E501

        Name of the server operating mode  # noqa: E501

        :return: The operating_mode of this Operations.  # noqa: E501
        :rtype: str
        """
        return self._operating_mode

    @operating_mode.setter
    def operating_mode(self, operating_mode):
        """Sets the operating_mode of this Operations.

        Name of the server operating mode  # noqa: E501

        :param operating_mode: The operating_mode of this Operations.  # noqa: E501
        :type: str
        """
        allowed_values = ["normal", "manual"]  # noqa: E501
        if (self._configuration.client_side_validation and
                operating_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `operating_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(operating_mode, allowed_values)
            )

        self._operating_mode = operating_mode

    @property
    def task(self):
        """Gets the task of this Operations.  # noqa: E501

        Name of the job task to execute  # noqa: E501

        :return: The task of this Operations.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this Operations.

        Name of the job task to execute  # noqa: E501

        :param task: The task of this Operations.  # noqa: E501
        :type: str
        """
        allowed_values = ["dston", "retrydump", "consoleservice", "iopreset", "remotedstoff", "remotedston", "iopdump", "dumprestart"]  # noqa: E501
        if (self._configuration.client_side_validation and
                task not in allowed_values):
            raise ValueError(
                "Invalid value for `task` ({0}), must be one of {1}"  # noqa: E501
                .format(task, allowed_values)
            )

        self._task = task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Operations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Operations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Operations):
            return True

        return self.to_dict() != other.to_dict()
